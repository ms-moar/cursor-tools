---
description: Visual process map for CREATIVE mode (Design Decisions)
globs: "**/creative*/**", "**/design*/**", "**/decision*/**"
alwaysApply: false
---
# CREATIVE MODE: DESIGN PROCESS MAP (Multi-Context)

> **TL;DR:** Guides structured design decision-making for a task selected from `tasks.md` (within a chosen Project Context), syncing with Jira.

**Key Enhancements:**
- Simplified structure with focus on integrations
- Jira and Confluence integration
- Epic-aware Git workflow
- Multi-context project support
- Streamlined creative process

## üß≠ CREATIVE MODE PROCESS FLOW

```mermaid
graph TD
    Start["CREATIVE Mode Start"] --> ReadGlobalConfig["Step 0.1: Read Global Configs"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    SelectActiveContext --> AutoSyncTasksMD["Step 1: Auto-Sync tasks.md with Jira (all contexts)"]
    AutoSyncTasksMD --> TaskSelect["Step 2: Select Task from tasks.md for Creative Work (filtered by active context)"]
    TaskSelect --> JiraStatusAssigneeCheck["Step 3: Check Jira Status/Assignee & Propose Updates (for selected task in its context)"]
    JiraStatusAssigneeCheck --> UpdateTasksMDWithJiraStatus["Step 3.1: Update tasks.md with Jira Status/Assignee"]
    UpdateTasksMDWithJiraStatus --> GitCheck["Step 4: Check/Propose Git Branch for Task (considering Epic branch)"]
    GitCheck --> CreativeWork["Step 5: Execute Creative Design Process (for selected Jira task)"]
    CreativeWork --> UpdateTasksMDWithCreativeProgress["Step 5.1: Update tasks.md with Creative Phase Progress/Completion"]
    UpdateTasksMDWithCreativeProgress --> SuggestNext["Step 6: Suggest Next Mode (IMPLEMENT)"]
    SuggestNext --> End["CREATIVE Mode End"]
```

## üìã CREATIVE PHASE DOCUMENT FORMAT

Each creative phase should produce a document with this structure:

```mermaid
graph TD
    subgraph "Creative Phase Document"
        Header["üé® CREATIVE PHASE: [TYPE]"]
        Problem["PROBLEM STATEMENT<br>Clear definition of the problem"]
        Options["OPTIONS ANALYSIS<br>Multiple approaches considered"]
        Pros["PROS & CONS<br>Tradeoffs for each option"]
        Decision["DECISION<br>Selected approach + rationale"]
        Impl["IMPLEMENTATION PLAN<br>Steps to implement the decision"]
        Diagram["VISUALIZATION<br>Diagrams of the solution"]
    end
    
    Header --> Problem --> Options --> Pros --> Decision --> Impl --> Diagram
```

## üîç CREATIVE TYPES AND APPROACHES

```mermaid
graph TD
    subgraph "UI/UX Design"
        UI1["User Flow<br>Analysis"]
        UI2["Component<br>Hierarchy"]
        UI3["Interaction<br>Patterns"]
        UI4["Visual Design<br>Principles"]
    end
    
    subgraph "Architecture Design"
        A1["Component<br>Structure"]
        A2["Data Flow<br>Patterns"]
        A3["Interface<br>Design"]
        A4["System<br>Integration"]
    end
    
    subgraph "Data Model Design"
        D1["Entity<br>Relationships"]
        D2["Schema<br>Design"]
        D3["Validation<br>Rules"]
        D4["Query<br>Optimization"]
    end
    
    subgraph "Algorithm Design"
        AL1["Complexity<br>Analysis"]
        AL2["Efficiency<br>Optimization"]
        AL3["Edge Case<br>Handling"]
        AL4["Scaling<br>Considerations"]
    end
```

## üìä REQUIRED FILE STATE VERIFICATION (Adapted)
*   **Instruction for AI**: Verification should focus on:
    1.  `activeProjectContext` is selected.
    2.  `tasks.md` exists and is readable.
    3.  A task (`selectedTaskLine` from `tasks.md`) is chosen for creative work, belonging to `activeProjectContext`.
    4.  Jira issue ID (`selectedJiraIssueKey`) is parsed from `selectedTaskLine`.
    5.  Relevant planning docs exist if complexity implies.
    6.  Jira issue `selectedJiraIssueKey` is in a state ready for creative work (e.g., status from `activeProjectContext.jira_status_mapping.PLAN` or `CREATIVE` itself).

## üìã OPTIONS ANALYSIS TEMPLATE

For each creative phase, analyze multiple options:

```
## OPTIONS ANALYSIS

### Option 1: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]

### Option 2: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]

### Option 3: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]
```

## üé® CREATIVE PHASE MARKERS

Use these visual markers for creative phases:

```
üé®üé®üé® ENTERING CREATIVE PHASE: [TYPE] üé®üé®üé®

[Creative phase content]

üé® CREATIVE CHECKPOINT: [Milestone]

[Additional content]

üé®üé®üé® EXITING CREATIVE PHASE - DECISION MADE üé®üé®üé®
```

## üìä CREATIVE PHASE VERIFICATION CHECKLIST (Adapted)
*   **Instruction for AI**: Checklist should verify:
    1.  Creative work for `selectedJiraIssueKey` (in `activeProjectContext.context_name`) is complete.
    2.  Design decisions documented (e.g., in `creative-docs/creative-[selectedJiraIssueKey].md`).
    3.  `tasks.md` entry for `selectedJiraIssueKey` is updated to reflect creative phase completion (e.g., a specific status marker or updated description).
    4.  Jira task `selectedJiraIssueKey` status updated (e.g., to `activeProjectContext.jira_status_mapping.CREATIVE` if it was in PLAN, or ready for IMPLEMENT).

## üîÑ MODE TRANSITION NOTIFICATION (Adapted)
*   **Instruction for AI**: Notification should confirm creative phase completion for `selectedJiraIssueKey` (context '[activeProjectContext.context_name]'), mention `tasks.md` and Jira updates, and suggest IMPLEMENT mode.

## üé® DETAILED CREATIVE WORKFLOW STEPS

### Step 0.1: Read Global Configs
*   **Action**: Read `integration_config.md` for `Project Contexts`, global settings, `tasks.md` format.

### Step 0.2: Select Active Project Context
*   **Action**: (As defined previously - user selects `activeProjectContext`).
*   **Action**: Store `selectedJiraProjectKey = activeProjectContext.jira_project_key`, `selectedJiraStatusMapping = activeProjectContext.jira_status_mapping`, `selectedContextName = activeProjectContext.context_name`.

### Step 1: Auto-Sync tasks.md with Jira (all contexts)
*   **Action**: (As defined in `implement-mode-map.mdc` - read `tasks.md`, parse details, check Jira, propose `tasks.md` updates for completed tasks).
*   **Report**: "`tasks.md` sync check complete."

### Step 2: Select Task from tasks.md for Creative Work (filtered by active context)
*   **Action**: Read `tasks.md`. Filter tasks by `(Context: [selectedContextName])` and not done status `[ ]`.
*   **Action**: Ask user: "Select a task for creative work (context '[selectedContextName]') or provide Jira Issue Key ([selectedJiraProjectKey]-XXX):\n[Filtered list]"
*   **Condition**: If user selects line: Store `selectedTaskLine`. Parse `selectedJiraIssueKey`, `taskTitle`.
*   **Condition**: If user provides Jira Key: Verify, store `selectedJiraIssueKey`. Try to find in `tasks.md` for `selectedTaskLine`. Fetch title from Jira.
*   **Error Handling**: If no task, stop.
*   **Report**: "Creative work for: [selectedJiraIssueKey] - [taskTitle] (context '[selectedContextName]')."

### Step 3: Check Jira Status/Assignee & Propose Updates (for selected task in its context)
*   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `selectedJiraIssueKey`.
*   **Action**: Let `creativeReadyStatus = selectedJiraStatusMapping.PLAN` (or a specific "Ready for Creative" status).
*   **Action**: Let `creativeStatus = selectedJiraStatusMapping.CREATIVE` (e.g., "To Do" or "Design").
*   **Action**: Let `implementStatus = selectedJiraStatusMapping.IMPLEMENT`.
*   **Condition**: If current Jira status is `implementStatus` (or beyond): Report warning or STOP if assignee mismatch, as creative phase is likely complete or skipped.
*   **Condition**: If current Jira status is NOT `creativeStatus`: Propose `mcp_mcp-atlassian_jira_transition_issue` to `creativeStatus`.
*   **Condition**: If assignee is NOT `currentUser()`: Propose update to `currentUser()`.
*   **Action**: Wait for approval. If changes made, set `jiraStatusOrAssigneeChanged = true`.

### Step 3.1: Update `tasks.md` with Jira Status/Assignee
*   **Condition**: If `jiraStatusOrAssigneeChanged` is true AND `selectedTaskLine` is not null:
    *   **Action**: Propose `edit_file` for `tasks.md` to update `selectedTaskLine` (e.g., ensure status checkbox `[ ]` is accurate, no specific assignee update needed in `tasks.md` string usually).
*   **Condition**: If `selectedTaskLine` is null (Jira key manually entered):
    *   **Action**: Formulate new task line for `tasks.md` (Key, Title, SP from Jira desc, context `selectedContextName`).
    *   **Action**: Propose `edit_file` to append to `tasks.md`.
*   **Report**: "`tasks.md` and Jira task [selectedJiraIssueKey] are aligned for creative work."

### Step 4: Check/Propose Git Branch for Task (considering Epic branch)
*   **Action**: Fetch parent Epic key for `selectedJiraIssueKey`. Let this be `parentEpicKey` (can be null).
*   **Action**: Let `defaultGitBranch = activeProjectContext.gitlab_default_branch`.
*   **Action**: Initialize `baseBranch = defaultGitBranch`.
*   **Condition**: If `parentEpicKey` is not null:
    *   **Action**: Let `epicBranchName = "epic/[parentEpicKey]"`.
    *   **Action**: (Optional - Advanced: Use `git branch -r --list origin/[epicBranchName]` or similar to check if remote epic branch exists. For simplicity, we can assume if an epic branch was created in PLAN, it might exist locally if user pulled, or we just attempt to base off it. A simpler approach is to always ask user if they know of an epic branch).
    *   **Action**: Ask user: "Is task [selectedJiraIssueKey] part of Epic [parentEpicKey]? And does a Git branch '[epicBranchName]' already exist for this Epic? If yes, we can base the new task branch on it."
    *   **Condition**: If user confirms `epicBranchName` exists and should be used:
        *   Set `baseBranch = epicBranchName`.
        *   **Action**: (Optional: Propose `git checkout [epicBranchName]` and `git pull` to ensure it's up-to-date if user isn't already on it).
*   **Action**: Let `featureBranchName = "feature/[selectedJiraIssueKey]-creative"`.
*   **Action**: Ask user: "It is recommended to work in a dedicated Git branch. Propose creating/switching to branch '[featureBranchName]' from '[baseBranch]'?"
*   **Condition**: If user agrees:
    *   **Action**: Propose `run_terminal_cmd` with `git checkout -b [featureBranchName] [baseBranch]`.
    *   **(Error Handling Note for AI)**: If `baseBranch` (especially an epic branch) doesn't exist locally, `git checkout -b` will fail if `baseBranch` is not `defaultGitBranch`. The AI should handle this, perhaps by falling back to `defaultGitBranch` or asking the user to create/pull the epic branch first.
    *   **Action**: Wait for approval.
*   **Report**: "Git branch '[featureBranchName]' proposed/created from '[baseBranch]'."

### Step 5: Execute Creative Design Process (for selected Jira task)
*   **Instruction (Prompt for LLM)**: "You are in CREATIVE mode for task '[selectedJiraIssueKey] - [taskTitle]' (Project Context: '[selectedContextName]', Jira Project: '[selectedJiraProjectKey]'). Current Git branch: '[currentGitBranch]'. Review linked planning documents. Guide through UI/UX, Architecture, Data Model, or Algorithm design. Document options, pros/cons, decisions, and implementation notes in 'creative-docs/creative-[selectedJiraIssueKey]-[TYPE].md'. Use Creative Phase Markers."
*   **(Iterative AI-User Interaction for Design)**
    *   User specifies creative type (UI/UX, Arch, Data, Algo).
    *   AI guides user through structured design (problem, options, pros/cons, decision, plan).
    *   AI uses `edit_file` to create/update `creative-docs/creative-[selectedJiraIssueKey]-[TYPE].md`.
    *   AI uses `run_terminal_cmd` for any relevant helper commands (e.g., diagram generation if tools allow).
    *   Creative work is documented iteratively for `selectedJiraIssueKey`.

### Step 5.0.1: (Optional) Update Jira Task Description (AI Assisted)
*   **Condition**: If user requests to update the Jira task description for `selectedJiraIssueKey`:
    *   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `selectedJiraIssueKey` (fields: description). Let `currentDescription` be the result.
    *   **Action**: Ask user: "–ö–∞–∫–æ–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey]?"
    *   **Action**: Let `newDescriptionFromUser` be the user's input.
    *   **Action**: Let `finalDescription = newDescriptionFromUser`.
    *   **Action**: Let `aiCreatedNote = "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò."`.
    *   **Action**: Let `aiEditedNote = "\\n\\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò."`.
    *   **Condition**: If `currentDescription` does NOT contain `aiCreatedNote`:
        *   `finalDescription = finalDescription + aiEditedNote`.
    *   **Action**: Ask user: "–ì–æ—Ç–æ–≤—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey] –≤ Jira –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ:\\n[finalDescription]\\n?"
    *   **Condition**: If user agrees:
        *   **Action**: Call `mcp_mcp-atlassian_jira_update_issue` for `selectedJiraIssueKey` (project `selectedJiraProjectKey`, description `finalDescription`).
        *   **Report**: "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey] –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Jira."
    *   **Condition**: If user disagrees:
        *   **Report**: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."

### Step 5.1: Update tasks.md with Creative Phase Progress/Completion
*   **Action**: After creative work (e.g., design document `creative-[selectedJiraIssueKey].md` is created/updated):
    *   **Action**: Propose `edit_file` for `tasks.md` to update `selectedTaskLine`. This might involve:
        *   Adding a note like "- Creative Design Complete" to the task description part of the string.
        *   Ensuring the status checkbox `[ ]` is still appropriate (task is not done yet, but ready for impl).
    *   **Report**: "`tasks.md` updated to reflect creative phase completion for [selectedJiraIssueKey]."

### Step 6: Suggest Next Mode (IMPLEMENT)
*   **Action**: Update `activeContext.md` (if used) with `selectedJiraIssueKey` and link to creative docs.
*   **Reminder**: "If significant architectural decisions for [selectedJiraIssueKey] (context '[selectedContextName]') were made, update `/docs/architecture.md`."
*   **Report**: "Creative design for [selectedJiraIssueKey] complete. Recommended next: IMPLEMENT Mode."

### Step 7: CREATIVE Mode End
*   Wait for user command.

*Note for AI: Remember MCP error handling and temp file deletion.* 