---
description: QA Mode
globs: qa-mode-map.mdc
alwaysApply: false
---
# QA MODE MAP (Multi-Context)

> **TL;DR:** This enhanced QA mode provides comprehensive validation for a task selected from `tasks.md` or for a general phase within a chosen Project Context. It validates task integrity in Jira, local documentation, and performs technical/DevOps checks relevant to the active context.

## üîç ENHANCED QA MODE PROCESS FLOW

```mermaid
graph TD
    Start["üöÄ START QA MODE"] --> ReadGlobalConfig["Step 0.1: Read Global Configs"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    SelectActiveContext --> IdentifyTarget["Step 0.3: Identify QA Target (Specific Jira Task or General Phase)"]
    
    IdentifyTarget --> DetectPhase["üß≠ PHASE DETECTION (for [activeProjectContext.context_name] / [qaTargetJiraIssueKey])"]
    
    %% Phase detection decision path
    DetectPhase --> PhaseDetermination{"Current Phase?"}
    PhaseDetermination -->|"VAN"| VANChecks["VAN Phase Validation"]
    PhaseDetermination -->|"PLAN"| PLANChecks["PLAN Phase Validation"]
    PhaseDetermination -->|"CREATIVE"| CREATIVEChecks["CREATIVE Phase Validation"] 
    PhaseDetermination -->|"IMPLEMENT"| IMPLEMENTChecks["IMPLEMENT Phase Validation"]
    
    %% Universal checks adapted for context and tasks.md
    IdentifyTarget --> UniversalChecks["üîç UNIVERSAL VALIDATION (for [activeProjectContext.context_name])"]
    UniversalChecks --> TasksMDJiraSync["1Ô∏è‚É£ tasks.md & JIRA SYNC/INTEGRITY (for [activeProjectContext])"]
    TasksMDJiraSync --> ReferenceCheck["2Ô∏è‚É£ REFERENCE VALIDATION (docs to Jira tasks in context)"]
    
    %% Phase-specific validations feed into comprehensive report
    VANChecks & PLANChecks & CREATIVEChecks & IMPLEMENTChecks --> PhaseSpecificResults["Phase-Specific Results"]
    ReferenceCheck & PhaseSpecificResults --> ValidationResults{"‚úÖ All Checks<br>Passed?"}
    
    %% Results Processing
    ValidationResults -->|"Yes"| SuccessReport["üìù GENERATE SUCCESS REPORT"]

    %% JIRA INTEGRATION START (using selected context)
    SuccessReport --> UpdateJiraStatus["üìö Update Jira Status for [qaTargetJiraIssueKey] (if any) in [selectedJiraProjectKey]"]
    UpdateJiraStatus --> SuggestNextMode["üö¶ Suggest Next Mode for [selectedJiraProjectKey]"]
    %% JIRA INTEGRATION END

    ValidationResults -->|"No"| FailureReport["‚ö†Ô∏è GENERATE FAILURE REPORT<br>With specific fix instructions"]
    
    %% Success Path
    SuggestNextMode --> ContinueProcess["üö¶ CONTINUE: Phase processes<br>can proceed"]
    
    %% Failure Path
    FailureReport --> FixIssues["üîß Fix Technical Issues"]
    FixIssues --> ReValidate["üîÑ Re-validate"]
    ReValidate --> ValidationResults
    
    %% Style nodes for clarity
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style ReadGlobalConfig fill:#f6ad55,stroke:#c27022,color:white
    style SelectActiveContext fill:#f6ad55,stroke:#c27022,color:white
    style DetectPhase fill:#f6ad55,stroke:#c27022,color:white
    style UniversalChecks fill:#f6546a,stroke:#c30052,color:white
    style TasksMDJiraSync fill:#10b981,stroke:#059669,color:white
    style ReferenceCheck fill:#10b981,stroke:#059669,color:white
    style ValidationResults fill:#f6546a,stroke:#c30052,color:white
    style SuccessReport fill:#10b981,stroke:#059669,color:white
    style FailureReport fill:#f6ad55,stroke:#c27022,color:white
    style ContinueProcess fill:#10b981,stroke:#059669,color:white,stroke-width:2px
    style FixIssues fill:#ff5555,stroke:#dd3333,color:white
    %% JIRA Node Styles
    style UpdateJiraStatus fill:#5e72e4,stroke:#324cdd,color:white
    style SuggestNextMode fill:#10b981,stroke:#059669,color:white
```

## DETAILED STEPS (Key Updates for Context and `tasks.md`)

### Step 0.1: Read Global Configs
*   **Action**: Read `integration_config.md` for `Project Contexts`, global settings, and `tasks.md` format info.

### Step 0.2: Select Active Project Context
*   **Action**: (As defined in previous modes - user selects `activeProjectContext`).
*   **Action**: Store `selectedJiraProjectKey`, `selectedJiraStatusMapping`, `selectedContextName`, GitLab/Vercel keys from `activeProjectContext`.

### Step 0.3: Identify QA Target (Specific Jira Task or General Phase for active context)
*   **Action**: Ask user: "Are we performing QA for a specific Jira Task in project '[selectedJiraProjectKey]' (context: '[selectedContextName]')? If yes, please provide the Jira Issue Key from `tasks.md` or Jira. Otherwise, QA will be general for the current phase of this context."
*   **Action**: If user provides Jira Key (e.g., `[selectedJiraProjectKey]-NNN`):
    *   Store as `qaTargetJiraIssueKey`.
    *   Attempt to find and store `qaSelectedTaskLine` from `tasks.md` matching this key and context.
    *   Fetch its details from Jira for context.
*   **Action**: Else (general QA for phase):
    *   Set `qaTargetJiraIssueKey = null`.
    *   `qaSelectedTaskLine = null`.

### Step 1: Detect Current Phase and Prepare (within selected context / for target task)
*   **Action**: If `qaTargetJiraIssueKey` is set, use its Jira status (and `selectedJiraStatusMapping`) to infer the current phase of this specific task.
*   **Action**: Else (general QA), analyze `activeContext.md` (if used and context-specific) or query Jira for recently updated tasks in `selectedJiraProjectKey` to infer current project phase for `selectedContextName`.
*   **Action**: Load appropriate validation checklist based on detected phase and `activeProjectContext`.

### Step 2: Perform Universal Checks (adapted for selected context and `tasks.md`)
*   **`tasks.md` & Jira Sync/Integrity Check (for `activeProjectContext`):**
    *   **Action**: Read `tasks.md`. For each line matching `(Context: [selectedContextName])`:
        *   Parse `JIRA_PROJECT_KEY_FROM_TASK`, `JIRA_ISSUE_ID_FROM_TASK`, local status.
        *   Verify `JIRA_PROJECT_KEY_FROM_TASK` matches `selectedJiraProjectKey`.
        *   Call `mcp_mcp-atlassian_jira_get_issue` for `JIRA_ISSUE_ID_FROM_TASK`.
        *   Compare Jira status and SP (from description) with `tasks.md` entry. Propose `edit_file` for `tasks.md` if discrepancies are found (e.g., status, SP, title).
        *   Check if task exists in Jira but not in `tasks.md` for this context (might require broader Jira search filtered by context if `tasks.md` is incomplete).
        *   Check if task in `tasks.md` for this context is closed in Jira but still open locally.
*   **Reference Validation**: If `qaTargetJiraIssueKey` is set, check links between local creative/plan docs (e.g., `creative-[qaTargetJiraIssueKey].md`) and the Jira task.

### Step 3: Execute Phase-Specific Validation (within selected context)
*   **Action**: Run validation steps specific to the detected phase for `activeProjectContext` or `qaTargetJiraIssueKey`.
*   **IMPLEMENT Phase - DevOps Pipeline Validation (using `activeProjectContext` settings)**:
    *   Check GitLab CI config (e.g., `.gitlab-ci.yml` in the root or context-specific path if defined).
    *   Validate CI config: `python devops-tools/gitlab/gitlab_tools.py validate-ci-config .gitlab-ci.yml --repo_url [activeProjectContext.gitlab_repo_url]` (if repo_url is available in context).
    *   Check last pipeline status for `activeProjectContext.gitlab_default_branch`: `python devops-tools/gitlab/gitlab_tools.py check-pipeline [activeProjectContext.gitlab_default_branch] --repo_url [activeProjectContext.gitlab_repo_url]`.
    *   If `activeProjectContext.vercel_project_id` exists, ask user if Vercel is used. If yes, validate `vercel.json` and optionally check Vercel deployment status for this context.

### Step 5: Report Results and Prepare for Transition (using selected context)
*   **Configuration Reading**: Use `selectedJiraProjectKey` and `selectedJiraStatusMapping`.
*   **Generate Report**: Mention `activeProjectContext.context_name` and `qaTargetJiraIssueKey` (if any).
*   **If Successful**: ‚úÖ
    *   **Update Jira Status (if `qaTargetJiraIssueKey` is set)**:
        *   Let `qaPassStatus` be the appropriate status from `selectedJiraStatusMapping` (e.g., value for `VAN_QA` or a specific `QA_PASSED` key).
        *   Call `mcp_mcp-atlassian_jira_transition_issue` (or `update_issue`) for `qaTargetJiraIssueKey` to `qaPassStatus`.
        *   Report: "Jira Task [qaTargetJiraIssueKey] in project [selectedJiraProjectKey] status updated to [qaPassStatus]."
    *   **Update `tasks.md` (if `qaTargetJiraIssueKey` is set and `qaSelectedTaskLine` exists)**:
        *   Propose `edit_file` for `tasks.md` to update the status of `qaSelectedTaskLine` (e.g., change checkbox or add note like "- QA Passed").
    *   **Transition**: Suggest next mode.
*   **If Failed**: ‚ùå (Report failure, BUILD mode blocked for `qaTargetJiraIssueKey` if set).

*Instruction for AI: Sections like `UNIVERSAL MEMORY BANK VERIFICATION`, `TASK TRACKING VERIFICATION` (their old diagrammatic representations), `UNIVERSAL VALIDATION COMMAND EXECUTION`, specific `DEPENDENCY/CONFIGURATION/ENVIRONMENT/MINIMAL BUILD TEST PROCESS` sections, and report formats need thorough review. They must be adapted to use `tasks.md` as a multi-context list and perform checks against Jira within the `activeProjectContext`. Many old commands targeting a generic `tasks.md` or `memory-bank/` directory are no longer valid without context filtering.*

## üß≠ PHASE DETECTION PROCESS

The enhanced QA mode first determines which phase the project is currently in:

```mermaid
graph TD
    PD["Phase Detection"] --> CheckMB["Analyze Memory Bank Files"]
    CheckMB --> CheckActive["Check activeContext.md<br>for current phase"]
    CheckActive --> CheckProgress["Check progress.md<br>for recent activities"]
    CheckProgress --> CheckTasks["Check tasks.md<br>for task status"]
    
    CheckTasks --> PhaseResult{"Determine<br>Current Phase"}
    PhaseResult -->|"VAN"| VAN["VAN Phase<br>Initialization"]
    PhaseResult -->|"PLAN"| PLAN["PLAN Phase<br>Task Planning"]
    PhaseResult -->|"CREATIVE"| CREATIVE["CREATIVE Phase<br>Design Decisions"]
    PhaseResult -->|"IMPLEMENT"| IMPLEMENT["IMPLEMENT Phase<br>Implementation"]
    
    VAN & PLAN & CREATIVE & IMPLEMENT --> LoadChecks["Load Phase-Specific<br>Validation Checks"]
    
    style PD fill:#4da6ff,stroke:#0066cc,color:white
    style PhaseResult fill:#f6546a,stroke:#c30052,color:white
    style LoadChecks fill:#10b981,stroke:#059669,color:white
```

## üìù UNIVERSAL MEMORY BANK VERIFICATION

This process ensures Memory Bank files are consistent and up-to-date regardless of phase:

```mermaid
graph TD
    MBVS["Memory Bank<br>Verification"] --> CoreCheck["Check Core Files Exist"]
    CoreCheck --> CoreFiles["Verify Required Files:<br>projectbrief.md<br>activeContext.md<br>tasks.md<br>progress.md"]
    
    CoreFiles --> ContentCheck["Verify Content<br>Consistency"]
    ContentCheck --> LastModified["Check Last Modified<br>Timestamps"]
    LastModified --> CrossRef["Validate Cross-<br>References"]
    
    CrossRef --> ConsistencyCheck{"All Files<br>Consistent?"}
    ConsistencyCheck -->|"Yes"| PassMB["‚úÖ Memory Bank<br>Verification Passed"]
    ConsistencyCheck -->|"No"| FailMB["‚ùå Memory Bank<br>Inconsistencies Found"]
    
    FailMB --> FixSuggestions["Generate Fix<br>Suggestions"]
    
    style MBVS fill:#4da6ff,stroke:#0066cc,color:white
    style ConsistencyCheck fill:#f6546a,stroke:#c30052,color:white
    style PassMB fill:#10b981,stroke:#059669,color:white
    style FailMB fill:#ff5555,stroke:#dd3333,color:white
```

## üìã TASK TRACKING VERIFICATION

This process validates tasks.md as the single source of truth:

```mermaid
graph TD
    TTV["Task Tracking<br>Verification"] --> CheckTasksFile["Check tasks.md<br>Existence & Format"]
    CheckTasksFile --> VerifyReferences["Verify Task References<br>in Other Documents"]
    VerifyReferences --> ProgressCheck["Check Consistency with<br>progress.md"]
    ProgressCheck --> StatusCheck["Verify Task Status<br>Accuracy"]
    
    StatusCheck --> TaskConsistency{"Tasks Properly<br>Tracked?"}
    TaskConsistency -->|"Yes"| PassTasks["‚úÖ Task Tracking<br>Verification Passed"]
    TaskConsistency -->|"No"| FailTasks["‚ùå Task Tracking<br>Issues Found"]
    
    FailTasks --> TaskFixSuggestions["Generate Task Tracking<br>Fix Suggestions"]
    
    style TTV fill:#4da6ff,stroke:#0066cc,color:white
    style TaskConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassTasks fill:#10b981,stroke:#059669,color:white
    style FailTasks fill:#ff5555,stroke:#dd3333,color:white
```

## üîÑ REFERENCE VALIDATION PROCESS

This process ensures proper cross-referencing between documents:

```mermaid
graph TD
    RV["Reference<br>Validation"] --> FindRefs["Find Cross-References<br>in Documents"]
    FindRefs --> VerifyRefs["Verify Reference<br>Accuracy"]
    VerifyRefs --> CheckBackRefs["Check Bidirectional<br>References"]
    
    CheckBackRefs --> RefConsistency{"References<br>Consistent?"}
    RefConsistency -->|"Yes"| PassRefs["‚úÖ Reference Validation<br>Passed"]
    RefConsistency -->|"No"| FailRefs["‚ùå Reference<br>Issues Found"]
    
    FailRefs --> RefFixSuggestions["Generate Reference<br>Fix Suggestions"]
    
    style RV fill:#4da6ff,stroke:#0066cc,color:white
    style RefConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassRefs fill:#10b981,stroke:#059669,color:white
    style FailRefs fill:#ff5555,stroke:#dd3333,color:white
```

## üö® PHASE-SPECIFIC VALIDATION PROCESSES

### VAN Phase Validation

```mermaid
graph TD
    VAN["VAN Phase<br>Validation"] --> InitCheck["Check Initialization<br>Completeness"]
    InitCheck --> PlatformCheck["Verify Platform<br>Detection"]
    PlatformCheck --> ComplexityCheck["Validate Complexity<br>Determination"]
    
    ComplexityCheck --> VANConsistency{"VAN Phase<br>Complete?"}
    VANConsistency -->|"Yes"| PassVAN["‚úÖ VAN Phase<br>Validation Passed"]
    VANConsistency -->|"No"| FailVAN["‚ùå VAN Phase<br>Issues Found"]
    
    style VAN fill:#4da6ff,stroke:#0066cc,color:white
    style VANConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassVAN fill:#10b981,stroke:#059669,color:white
    style FailVAN fill:#ff5555,stroke:#dd3333,color:white
```

### PLAN Phase Validation

```mermaid
graph TD
    PLAN["PLAN Phase<br>Validation"] --> PlanCheck["Check Planning<br>Documentation"]
    PlanCheck --> TaskBreakdown["Verify Task<br>Breakdown"]
    TaskBreakdown --> ScopeCheck["Validate Scope<br>Definition"]
    
    ScopeCheck --> PLANConsistency{"PLAN Phase<br>Complete?"}
    PLANConsistency -->|"Yes"| PassPLAN["‚úÖ PLAN Phase<br>Validation Passed"]
    PLANConsistency -->|"No"| FailPLAN["‚ùå PLAN Phase<br>Issues Found"]
    
    style PLAN fill:#4da6ff,stroke:#0066cc,color:white
    style PLANConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassPLAN fill:#10b981,stroke:#059669,color:white
    style FailPLAN fill:#ff5555,stroke:#dd3333,color:white
```

### CREATIVE Phase Validation

```mermaid
graph TD
    CREATIVE["CREATIVE Phase<br>Validation"] --> DesignCheck["Check Design<br>Documents"]
    DesignCheck --> ArchCheck["Verify Architectural<br>Decisions"]
    ArchCheck --> PatternCheck["Validate Design<br>Patterns"]
    
    PatternCheck --> CREATIVEConsistency{"CREATIVE Phase<br>Complete?"}
    CREATIVEConsistency -->|"Yes"| PassCREATIVE["‚úÖ CREATIVE Phase<br>Validation Passed"]
    CREATIVEConsistency -->|"No"| FailCREATIVE["‚ùå CREATIVE Phase<br>Issues Found"]
    
    style CREATIVE fill:#4da6ff,stroke:#0066cc,color:white
    style CREATIVEConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassCREATIVE fill:#10b981,stroke:#059669,color:white
    style FailCREATIVE fill:#ff5555,stroke:#dd3333,color:white
```

### IMPLEMENT Phase Technical Validation

This retains the original QA validation from the previous version:

```mermaid
graph TD
    IMPLEMENT["IMPLEMENT Phase<br>Validation"] --> ReadDesign["Read Design Decisions"]
    ReadDesign --> FourChecks["Four-Point Technical<br>Validation"]
    
    FourChecks --> DepCheck["1Ô∏è‚É£ Dependency<br>Verification"]
    DepCheck --> ConfigCheck["2Ô∏è‚É£ Configuration<br>Validation"]
    ConfigCheck --> EnvCheck["3Ô∏è‚É£ Environment<br>Validation"]
    EnvCheck --> MinBuildCheck["4Ô∏è‚É£ Minimal Build<br>Test"]
    MinBuildCheck --> DevOpsCheck["5Ô∏è‚É£ DevOps Pipeline<br>Validation"]
    
    DevOpsCheck --> IMPLEMENTConsistency{"Technical<br>Prerequisites Met?"}
    IMPLEMENTConsistency -->|"Yes"| PassIMPLEMENT["‚úÖ IMPLEMENT Phase<br>Validation Passed"]
    IMPLEMENTConsistency -->|"No"| FailIMPLEMENT["‚ùå IMPLEMENT Phase<br>Issues Found"]
    
    style IMPLEMENT fill:#4da6ff,stroke:#0066cc,color:white
    style FourChecks fill:#f6546a,stroke:#c30052,color:white
    style DevOpsCheck fill:#6f42c1,stroke:#5a32a3,color:white
    style IMPLEMENTConsistency fill:#f6546a,stroke:#c30052,color:white
    style PassIMPLEMENT fill:#10b981,stroke:#059669,color:white
    style FailIMPLEMENT fill:#ff5555,stroke:#dd3333,color:white
```

## üíª 5Ô∏è‚É£ DEVOPS PIPELINE VALIDATION PROCESS

This validation point tests the integration with GitLab CI/CD pipeline and optionally with Vercel deployment.

### Command Execution:

```bash
# Check GitLab CI configuration
test -f .gitlab-ci.yml && echo "‚úÖ GitLab CI config found" || echo "‚ùå GitLab CI config missing"

# Validate GitLab CI configuration syntax
python devops-tools/gitlab/gitlab_tools.py validate-ci-config .gitlab-ci.yml

# Check last pipeline status
python devops-tools/gitlab/gitlab_tools.py check-pipeline main

# Optional: Validate Vercel configuration
test -f vercel.json && echo "‚úÖ Vercel config found" || echo "‚ö†Ô∏è Vercel config not found (optional)"
```

### Validation Criteria:
- GitLab CI configuration must exist and be syntactically valid
- Last CI pipeline for the main branch should be successful
- If Vercel is used, configuration should be valid
- Project structure should match CI/CD expectations

### Common Fixes:
- Fix GitLab CI configuration syntax errors
- Address failed pipeline steps
- Update project structure to match CI/CD requirements
- Configure Vercel properly if deployment is needed

## üìã UNIVERSAL VALIDATION COMMAND EXECUTION

### Memory Bank Verification Commands:

```bash
# Check Memory Bank file existence and recency
ls -la memory-bank/
find memory-bank/ -type f -mtime -7 | sort

# Check for consistency between files
grep -r "task" memory-bank/
grep -r "requirement" memory-bank/
```

### Task Tracking Verification Commands:

```bash
# Verify tasks.md as source of truth
test -f tasks.md && echo "‚úÖ tasks.md exists" || echo "‚ùå tasks.md missing"

# Check references to tasks in other files
grep -r "Task" --include="*.md" .
grep -r "task" --include="*.md" . | grep -v "tasks.md" | wc -l

# Verify task status consistency
grep -i "completed\|done\|finished" tasks.md
grep -i "in progress\|started" tasks.md
```

### Reference Validation Commands:

```bash
# Find cross-references between files
grep -r "see\|refer\|reference" --include="*.md" .

# Check for broken references
for file in $(grep -l "see\|refer\|reference" --include="*.md" .); do
  for ref in $(grep -o '[a-zA-Z0-9_-]*\.md' $file); do
    test -f $ref || echo "‚ùå Broken reference: $ref in $file"
  done
done
```

## üìã 1Ô∏è‚É£ DEPENDENCY VERIFICATION PROCESS (Original)

This validation point ensures all required packages are correctly installed.

### Command Execution:

```bash
# Check if packages are installed
npm list react react-dom tailwindcss postcss autoprefixer

# Verify package versions match requirements
npm list | grep -E "react|tailwind|postcss"

# Check for peer dependency warnings
npm ls --depth=0
```

### Validation Criteria:
- All required packages must be installed
- Versions must be compatible with requirements
- No critical peer dependency warnings
- Required dev dependencies must be present

### Common Fixes:
- `npm install [missing-package]` - Install missing packages
- `npm install [package]@[version]` - Fix version mismatches
- `npm install --save-dev [dev-dependency]` - Add development dependencies

## üìù 2Ô∏è‚É£ CONFIGURATION VALIDATION PROCESS (Original)

This validation point ensures configuration files are in the correct format for the project.

### Command Execution:

```bash
# Check package.json for module type
grep "\"type\":" package.json

# Verify configuration file extensions match module type
find . -name "*.config.*" | grep -E "\.(js|cjs|mjs)$"

# Test configuration syntax
node -c *.config.js || node -c *.config.cjs || node -c *.config.mjs
```

### Validation Criteria:
- Configuration file extensions must match module type in package.json
- File syntax must be valid
- Configuration must reference installed packages

### Common Fixes:
- Rename `.js` to `.cjs` for CommonJS in ES module projects
- Fix syntax errors in configuration files
- Adjust configuration to reference installed packages

## üåê 3Ô∏è‚É£ ENVIRONMENT VALIDATION PROCESS (Original)

This validation point ensures the development environment is correctly set up.

### Command Execution:

```bash
# Check build tools 
npm run --help

# Verify node version compatibility
node -v

# Check for environment variables
printenv | grep -E "NODE_|PATH|HOME"

# Verify access permissions
ls -la .
```

### Validation Criteria:
- Node.js version must be compatible with requirements
- Build commands must be defined in package.json
- Environment must have necessary access permissions
- Required environment variables must be set

### Common Fixes:
- Update Node.js version
- Add missing scripts to package.json
- Fix file permissions with chmod/icacls
- Set required environment variables

## üî• 4Ô∏è‚É£ MINIMAL BUILD TEST PROCESS (Original)

This validation point tests a minimal build to ensure basic functionality works.

### Command Execution:

```bash
# Run a minimal build
npm run build -- --dry-run || npm run dev -- --dry-run

# Test entry point file existence
find src -name "main.*" -o -name "index.*"

# Validate HTML entry point
grep -i "script.*src=" index.html
```

### Validation Criteria:
- Build process must complete without errors
- Entry point files must exist and be correctly referenced
- HTML must reference the correct JavaScript entry point
- Basic rendering must work in a test environment

### Common Fixes:
- Fix entry point references in HTML
- Correct import paths in JavaScript
- Fix build configuration errors
- Update incorrect paths or references

## üìä ENHANCED COMPREHENSIVE QA REPORT FORMAT

```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîç ENHANCED QA VALIDATION REPORT ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÇ                                                                               ‚îÇ
‚îÇ Project: [Project Name]               Date: [Current Date]                    ‚îÇ
‚îÇ Platform: [OS Platform]               Detected Phase: [Current Phase]         ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ UNIVERSAL VALIDATION RESULTS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 1Ô∏è‚É£ MEMORY BANK VERIFICATION                                                   ‚îÇ
‚îÇ    ‚úì Core Files: [Status]                                                     ‚îÇ
‚îÇ    ‚úì Content Consistency: [Status]                                            ‚îÇ
‚îÇ    ‚úì Last Modified: [Status]                                                  ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 2Ô∏è‚É£ TASK TRACKING VERIFICATION                                                 ‚îÇ
‚îÇ    ‚úì tasks.md Status: [Status]                                                ‚îÇ
‚îÇ    ‚úì Task References: [Status]                                                ‚îÇ
‚îÇ    ‚úì Status Consistency: [Status]                                             ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 3Ô∏è‚É£ REFERENCE VALIDATION                                                       ‚îÇ
‚îÇ    ‚úì Cross-References: [Status]                                               ‚îÇ
‚îÇ    ‚úì Reference Accuracy: [Status]                                             ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ PHASE-SPECIFIC VALIDATION ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ [VAN/PLAN/CREATIVE/IMPLEMENT] PHASE VALIDATION                                ‚îÇ
‚îÇ    ‚úì [Phase-specific check 1]: [Status]                                       ‚îÇ
‚îÇ    ‚úì [Phase-specific check 2]: [Status]                                       ‚îÇ
‚îÇ    ‚úì [Phase-specific check 3]: [Status]                                       ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ [Technical validation section shown only for IMPLEMENT phase]                  ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 4Ô∏è‚É£ MINIMAL BUILD TEST                                                          ‚îÇ
‚îÇ    ‚úì Build Process: [Status]                                                  ‚îÇ
‚îÇ    ‚úì Entry Points: [Status]                                                   ‚îÇ
‚îÇ    ‚úì HTML References: [Status]                                                ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ 5Ô∏è‚É£ DEVOPS PIPELINE VALIDATION                                                 ‚îÇ
‚îÇ    ‚úì GitLab CI Config: [Status]                                               ‚îÇ
‚îÇ    ‚úì Pipeline Status: [Status]                                                ‚îÇ
‚îÇ    ‚úì Vercel Configuration: [Status] (if applicable)                           ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ OVERALL STATUS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                               ‚îÇ
‚îÇ ‚úÖ VALIDATION PASSED - Project quality verified for current phase              ‚îÇ
‚îÇ                                                                               ‚îÇ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
```

## üö´ ENHANCED FAILURE REPORT FORMAT

If validation fails, a detailed failure report is generated:

```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö†Ô∏è QA VALIDATION FAILURES ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÇ                                                                                 ‚îÇ
‚îÇ Project: [Project Name]               Date: [Current Date]                      ‚îÇ
‚îÇ Platform: [OS Platform]               Detected Phase: [Current Phase]           ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ FAILED CHECKS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå MEMORY BANK ISSUES                                                           ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå TASK TRACKING ISSUES                                                         ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå REFERENCE ISSUES                                                             ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå [PHASE]-SPECIFIC ISSUES                                                      ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details]                                                   ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ùå DEVOPS PIPELINE ISSUES                                                       ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details with GitLab CI pipeline]                           ‚îÇ
‚îÇ    ‚Ä¢ [Specific issue details with Vercel configuration (if applicable)]         ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ REQUIRED FIXES ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ 1. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ 2. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ 3. [Specific fix instruction with command]                                      ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚îÇ ‚ö†Ô∏è VALIDATION FAILED - Please resolve issues before proceeding                  ‚îÇ
‚îÇ                                                                                 ‚îÇ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
```

## üîÑ QA-ANYTIME ACTIVATION PROTOCOL

The enhanced QA mode can be activated at any time in the development process:

```mermaid
graph TD
    Start["User Types: QA"] --> DetectContext["Detect Current Context"]
    DetectContext --> RunQA["Run QA with Context-Aware Checks"]
    RunQA --> GenerateReport["Generate Appropriate QA Report"]
    GenerateReport --> UserResponse["Present Report to User"]
    
    UserResponse --> FixNeeded{"Fixes<br>Needed?"}
    FixNeeded -->|"Yes"| SuggestFixes["Display Fix Instructions"]
    FixNeeded -->|"No"| ContinueWork["Continue Current Phase Work"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style FixNeeded fill:#f6546a,stroke:#c30052,color:white
    style SuggestFixes fill:#ff5555,stroke:#dd3333,color:white
    style ContinueWork fill:#10b981,stroke:#059669,color:white
```

This enhanced QA mode serves as a "quality guardian" throughout the development process, ensuring documentation is consistently maintained and all phase requirements are met before proceeding to the next phase. 

## üß™ QA VALIDATION STEPS

### Step 1: Detect Current Phase and Prepare
- **Action**: Analyze files to determine current project phase.
- **Action**: Load appropriate validation checklist based on phase.

### Step 2: Perform Universal Checks
- **Action**: Verify Memory Bank file consistency.
- **Action**: Validate task tracking in tasks.md.
- **Action**: Check cross-references between documents.

### Step 3: Execute Phase-Specific Validation
- **Action**: Run validation steps specific to the detected phase.
- **Action**: For IMPLEMENT phase, perform technical validation including dependency, configuration, environment, and build checks.
- **Action**: For IMPLEMENT phase, execute GitLab CI/CD pipeline validation:
  - **Action**: Check for existence and validity of GitLab CI configuration.
  - **Action**: Validate CI/CD pipeline status using `python devops-tools/gitlab/gitlab_tools.py`.
  - **Action**: Optional: Check Vercel configuration if user confirms Vercel is used for deployments.

### Step 4: Compile Results and Generate Report
- **Action**: Compile all validation results into a comprehensive report.
- **Action**: Format report with clear pass/fail indicators for each check.
- **Action**: Include specific error details and fix suggestions for any failures.

### Step 5: Report Results and Prepare for Transition

- **Configuration Reading**:
    - **Action**: Read the `integration_config.md` file to get Jira configuration.
    - **Data**: Extract `Project Key` and Jira status for VAN QA phase (e.g., `In Progress`).

- **Generate Report**: Create either a success or failure report based on the validation outcome.
- **If Successful**: ‚úÖ
    - **Update Jira Status**:
        - **Action**: Read `tasks.md` to find the current task and its Jira ID.
        - **Action**: Call `mcp_mcp-atlassian_jira_update_issue`.
        - **Parameters**:
            - `issue_key`: The Jira ID retrieved from `tasks.md`.
            - `fields`: `'{"status": {"name": "$STATUS_NAME"}}'` where `$STATUS_NAME` is from the configuration (e.g., "In Progress").
            - *Note: May require `transition_issue` if direct update fails*.
        - **Error Handling**: Retry once on MCP failure, then report and ask user.
    - **Transition**: Signal successful validation and suggest switching to BUILD/IMPLEMENT mode.
    ```
    ‚úÖ TECHNICAL VALIDATION COMPLETE
    Jira Story status updated based on configuration.
    All prerequisites verified successfully.
    You may now proceed to BUILD mode.
    Type 'BUILD' or 'IMPLEMENT' to begin implementation.
    ```
- **If Failed**: ‚ùå
    - **Transition**: Report the failure, indicating that BUILD mode is blocked, and prompt the user to fix the issues and re-run QA.
    ```
    ‚ö†Ô∏è QA VALIDATION FAILED
    See report above for details.
    Jira Story status remains unchanged.
    BUILD MODE IS BLOCKED until these issues are resolved.
    Type 'VAN QA' after fixing the issues to re-validate.

    ```