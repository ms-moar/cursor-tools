---
description: 
globs: 
alwaysApply: false
---
# PLAN MODE: LLM-Powered Planning Workflow

## OVERVIEW
This mode uses the AI's Large Language Model (LLM) capabilities to analyze the project goal and context, then propose a high-level plan structured into Epics, Sprints, and Tasks, including definitive Story Point (SP) estimations. The output is a plan for review, subsequent Jira issue creation based on a user-selected Project Context, updating the local `tasks.md` file, and optionally creating a Git branch for processed Epics.

**Key Enhancements:**
- AI-powered plan generation with automatic Story Point estimation
- Duplicate task checking in Jira
- Epic and Sprint workflow support
- Multi-context project support
- Automatic synchronization with tasks.md

## WORKFLOW

```mermaid
graph TD
    Start["PLAN Mode Start"] --> AutoSync["Step 1: Auto-Sync Tasks (Jira & tasks.md)"]
    AutoSync --> ReadGlobalContext["Step 2: Read Global Project Context & Configs"]
    ReadGlobalContext --> SelectActiveContext["Step 2.1: Select Active Project Context"]
    SelectActiveContext --> IdentifyGoal["Step 3: Identify Planning Goal (for selected context)"]
    IdentifyGoal --> GeneratePlanWithSP["Step 4: Generate Epic/Sprint/Task Plan with Final SP (LLM Task)"]
    GeneratePlanWithSP --> OutputPlan["Step 5: Output Generated Plan with Final SP"]
    OutputPlan --> JiraSync["Step 5.1: Process Epics & Tasks for Jira Creation (using selected context)"]
    JiraSync --> UpdateTasksMD["Step 5.2: Update Local tasks.md File"]
    UpdateTasksMD --> ProposeEpicBranch["Step 5.3: Propose Epic Git Branch Creation (Optional)"]
    ProposeEpicBranch --> End["PLAN Mode End"]
```

## DETAILED STEPS

### Step 1: Auto-Sync Tasks (Jira & tasks.md)
*   **(Optional) Action**: Read `tasks.md` line by line.
    *   For each line, parse `JIRA_PROJECT_KEY`, `JIRA_ISSUE_ID`, and current local status.
    *   Find the corresponding `Project Context` in `integration_config.json` using `JIRA_PROJECT_KEY`.
    *   Call `mcp_mcp-atlassian_jira_get_issue` for `JIRA_ISSUE_ID` in its specific project to get its current status in Jira.
    *   Compare Jira status with local status. If different and Jira status is a "completed" one (e.g., matches `ARCHIVE` or `REFLECT` status in the context's `jira_status_mapping`), propose `edit_file` for `tasks.md` to update the status for that line.
*   **Report**: Briefly report sync results.

### Step 2: Read Global Project Context & Configs
*   **Action**: Read relevant general context files (e.g., `projectbrief.md` if global, user's initial request for planning).
*   **Action**: Read `integration_config.json` to get the list of all `Project Contexts` and global settings (like SP formula and `tasks.md` format info).

### Step 2.1: Select Active Project Context
*   **Action**: Let `definedContexts` be the list of `Project Contexts` read from `integration_config.json`.
*   **Condition**: If `definedContexts` contains more than one context:
    *   **Action**: Extract `context_name` from each defined context.
    *   **Action**: Ask user: "For which project context are we planning new tasks? Please select from: [List of `context_name`s]."
    *   **Action**: Store the user's selection as `activeProjectContext`.
*   **Condition**: If `definedContexts` contains exactly one context:
    *   **Action**: Automatically select this single context as `activeProjectContext`.
    *   **Report**: "Using project context: '[activeProjectContext.context_name]' for new tasks."
*   **Condition**: If `definedContexts` is empty or not found:
    *   **Report**: "ERROR: No project contexts are defined in `integration_config.json`. Please configure at least one project context."
    *   **Action**: Stop PLAN mode.
*   **Action**: Let `selectedJiraProjectKey = activeProjectContext.jira_project_key`.
*   **Action**: Let `selectedJiraDefaultIssueType = activeProjectContext.jira_default_issue_type`.
*   **Action**: Let `selectedContextName = activeProjectContext.context_name`.

### Step 3: Identify Planning Goal (for selected context)
*   **Action**: Based on the general context and the `activeProjectContext`, clearly state the main goal or feature for which new tasks will be planned.
*   **Report**: "Planning Goal for new tasks in project context '[selectedContextName]': [Formulated Goal]."

### Step 4: Generate Epic/Sprint/Task Plan with Final SP (LLM Task)
*   **Instruction (Prompt for LLM)**: "You are planning for the project context: '[selectedContextName]' (Jira Project: [selectedJiraProjectKey]). Analyze the formulated goal (from Step 3) and project context. Using your understanding of software development and project management:
    1.  Identify 2-5 major logical blocks of work (**Epics**). Give each a clear name.
    2.  For **each Epic**, propose a list of **specific, actionable tasks** (including name and a brief description for each task if possible).
    3.  Group tasks into sequential **Sprints** (e.g., 3-7 tasks each). Name the Sprints.
    4.  **For each task, provide a FINAL Story Point (SP) estimation.** Base this on task complexity. For reference: in this project, 1 SP is approximately 8 developer hours or 10 AI minutes of intensive work (refer to global settings in `integration_config.json` for the exact formula). This SP estimation is definitive. Ensure SPs are presented with the prefix `SP_VALUE=` (e.g., `SP_VALUE=3`, `SP_VALUE=0.5`).
    5.  Format the plan using Markdown: Level 2 headings (`##`) for Epics, Level 3 (`###`) for Sprints, and lists (`- [Task Name] - [Task Description (optional)] - SP_VALUE=[X]`) for tasks. **Do NOT include Jira IDs or context names in this generated plan text, as those will be added later.**"
*   **(Internal LLM Execution)**: AI model processes and generates the plan (Epic -> Sprint -> Task List with Name, SP in SP_VALUE=X format, Description).

### Step 4.1: Check for Duplicate Tasks in Jira (AI Action)
*   **Action**: Search Jira for existing tasks with similar titles in the selected project context.
*   **Action**: Compare generated task names with existing Jira issues.
*   **Action**: Report potential duplicates and ask user for confirmation before proceeding.
*   **Report**: "Duplicate check complete. [X] potential duplicates found."

### Step 5: Output Generated Plan with Final SP
*   **Action**: Output the complete plan generated by LLM.
*   **Report**: "Here is the proposed plan for project context '[selectedContextName]'. SP estimations are final. Next, we'll process these for Jira (project [selectedJiraProjectKey]) and update `tasks.md`."

### Step 5.1: Process Epics & Tasks for Jira Creation (using selected context)
*   **Action**: Initialize an empty list `createdOrUpdatedJiraIssues = []` to store details of issues successfully processed with Jira.
*   **Action**: For each Epic in the plan from Step 4 (`epicName`, and its list of tasks with SPs now in `SP_VALUE=X` format):
    *   Calculate `totalEpicSp` (parsing X from `SP_VALUE=X`). Create `taskListStringForEpicDesc` (listing tasks with their `SP_VALUE=X`) and `epicDescription` (including `SP_VALUE=[totalEpicSp]` and `Project Context: [selectedContextName]`).
    *   Let `assigneeLogin = activeProjectContext.Jira_login`.
    *   Let `aiNote = "\\n\\nПримечание: Задача создана с помощью ИИ."`.
    *   **Condition**: If `totalEpicSp < 7`:
        *   Ask user about consolidating. If yes:
            *   Let `finalEpicDescription = epicDescription + aiNote`.
            *   Call `mcp_mcp-atlassian_jira_create_issue` for Epic (project `selectedJiraProjectKey`, summary `epicName`, type 'Epic', description `finalEpicDescription`, assignee `assigneeLogin`).
            *   If successful, add `{jira_id: EPIC_KEY, title: epicName, sp_value: totalEpicSp, description: taskListStringForEpicDesc, is_epic_only: true}` to `createdOrUpdatedJiraIssues`.
        *   If user says no to consolidation, proceed as if `totalEpicSp >= 7`.
    *   **Condition**: Else (`totalEpicSp >= 7` or user disagreed with consolidation):
        *   Ask user to create Epic. If yes:
            *   Let `finalEpicDescription = "Total Story Points: SP_VALUE=[totalEpicSp]\\nProject Context: \'[selectedContextName]\'" + aiNote`.
            *   Call `mcp_mcp-atlassian_jira_create_issue` for Epic (project `selectedJiraProjectKey`, summary `epicName`, type 'Epic', description `finalEpicDescription`, assignee `assigneeLogin`).
            *   If successful, let `parentEpicKey` be the new Jira key. Add `{jira_id: parentEpicKey, title: epicName, sp_value: totalEpicSp, description: "(Epic - tasks listed separately)", is_epic_only: false, sub_tasks: []}` to `createdOrUpdatedJiraIssues`.
            *   Report success.
            *   For each task (`taskName`, `taskSpValue` (e.g., "SP_VALUE=3"), `taskDescription`) under this Epic:
                *   Confirm other Jira details (components, labels).
                *   Let `parsedTaskSp = X` (from `taskSpValue`).
                *   Let `jiraTaskDescription = "Story Points: SP_VALUE=[parsedTaskSp]\\nProject Context: \'[selectedContextName]\'\\n\\nOriginal Description:\\n" + taskDescription + aiNote`.
                *   Ask user to create Jira issue. If yes:
                    *   Call `mcp_mcp-atlassian_jira_create_issue` for Task (project `selectedJiraProjectKey`, summary `taskName`, type `selectedJiraDefaultIssueType`, description `jiraTaskDescription`, parent `parentEpicKey`, assignee `assigneeLogin`).
                    *   If successful, add/append to `sub_tasks` of the parent Epic in `createdOrUpdatedJiraIssues`: `{jira_id: TASK_KEY, title: taskName, sp_value: parsedTaskSp, description: taskDescription}`.
                    *   Report success.
*   **Report**: "Jira issue creation/update process completed for project context '[selectedContextName]'."

### Step 5.2: Update Local `tasks.md` File
*   **Action**: Read `integration_config.json` for the `tasks.md` line format (which now includes `SP_VALUE=[X]`).
*   **Action**: For each entry in `createdOrUpdatedJiraIssues`:
    *   **Condition**: If `is_epic_only` is true for an Epic entry:
        *   Formulate the `tasks.md` line: `- [ ] **[[selectedJiraProjectKey]:[epic.jira_id]]** [EPIC] [epic.title] - *Tasks in description* - SP_VALUE=[epic.sp_value] (Context: [selectedContextName])`
        *   Propose `edit_file` to append this line to `tasks.md` under a relevant heading (e.g., `## Epics for [selectedContextName]`).
    *   **Condition**: Else (it's an Epic with separate tasks, or a standalone task if Epics are not used for some reason):
        *   If it's an Epic (`parentEpicKey` was set for it), formulate its line:
          `- [ ] **[[selectedJiraProjectKey]:[epic.jira_id]]** [EPIC] [epic.title] - SP_VALUE=[epic.sp_value] (Context: [selectedContextName])`
        *   Propose `edit_file` to append this line to `tasks.md`.
        *   For each `sub_task` associated with this Epic in `createdOrUpdatedJiraIssues`:
            *   Formulate the `tasks.md` line: `- [ ] **[[selectedJiraProjectKey]:[sub_task.jira_id]]** [sub_task.title] - *[sub_task.description]* - SP_VALUE=[sub_task.sp_value] (Context: [selectedContextName])`
            *   Propose `edit_file` to append this line to `tasks.md` (indented under the Epic, if possible, or as a flat list).
*   **Report**: "`tasks.md` has been updated/proposed with new tasks for project context '[selectedContextName]'."

### Step 5.3: Propose Epic Git Branch Creation (Optional)
*   **Action**: For each Epic entry in `createdOrUpdatedJiraIssues` (where `is_epic_only` is false, meaning it's a larger epic with sub-tasks, or even for `is_epic_only` if desired):
    *   Let `epicKey = epic.jira_id`.
    *   Let `defaultBranch = activeProjectContext.gitlab_default_branch` (e.g., 'main' or 'develop').
    *   Propose a branch name, e.g., `epicBranchName = "epic/[epicKey]"`.
    *   **Action**: Ask user: "An Epic [epicKey] ([epic.title]) has been planned. Would you like to create a dedicated Git branch named '[epicBranchName]' from '[defaultBranch]' for this Epic? Feature branches for its tasks can then be created from this epic branch."
    *   **Condition**: If user agrees:
        *   **Action**: Propose `run_terminal_cmd` with `git checkout -b [epicBranchName] [defaultBranch]`.
        *   **Action**: Wait for approval.
        *   **Report**: "Git branch '[epicBranchName]' for Epic [epicKey] has been proposed/created from '[defaultBranch]'."
    *   **Condition**: If user declines:
        *   **Report**: "OK, a dedicated branch for Epic [epicKey] will not be created at this time. Feature branches will be based off '[defaultBranch]'."

### Step 6: PLAN Mode End
*   The mode concludes. User can review Jira, `tasks.md`, and Git branches.
