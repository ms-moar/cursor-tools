---
description: 
globs: 
alwaysApply: false
---
# PLAN MODE: LLM-Powered Planning Workflow

## OVERVIEW
This mode uses the AI's Large Language Model (LLM) capabilities to analyze the project goal and context, then propose a high-level plan structured into Epics, Sprints, and Tasks, including definitive Story Point (SP) estimations. The output is a plan for review, subsequent Jira issue creation based on a user-selected Project Context, updating the local `tasks.md` file, and optionally creating a Git branch for processed Epics.

**Key Enhancements:**
- AI-powered plan generation with automatic Story Point estimation
- Duplicate task checking in Jira
- Epic and Sprint workflow support
- Multi-context project support
- Automatic synchronization with tasks.md

## WORKFLOW

```mermaid
graph TD
    Start["PLAN Mode Start"] --> AutoSync["Step 1: Auto-Sync Tasks (Jira & tasks.md)"]
    AutoSync --> ReadGlobalContext["Step 2: Read Global Project Context & Configs"]
    ReadGlobalContext --> SelectActiveContext["Step 2.1: Select Active Project Context"]
    SelectActiveContext --> IdentifyGoal["Step 3: Identify Planning Goal (for selected context)"]
    IdentifyGoal --> GeneratePlanWithSP["Step 4: Generate Epic/Sprint/Task Plan with Final SP (LLM Task)"]
    GeneratePlanWithSP --> OutputPlan["Step 5: Output Generated Plan with Final SP"]
    OutputPlan --> JiraSync["Step 5.1: Process Epics & Tasks for Jira Creation (using selected context)"]
    JiraSync --> UpdateTasksMD["Step 5.2: Update Local tasks.md File"]
    UpdateTasksMD --> ProposeEpicBranch["Step 5.3: Propose Epic Git Branch Creation (Optional)"]
    ProposeEpicBranch --> End["PLAN Mode End"]
```

## DETAILED STEPS

### Step 1: Auto-Sync Tasks (Jira & tasks.md)
*   **(Optional) Action**: Read `tasks.md` line by line.
    *   For each line, parse `JIRA_PROJECT_KEY`, `JIRA_ISSUE_ID`, current local status, and current local Story Points (e.g., from a pattern like `SP_VALUE=[X]`).
    *   Find the corresponding `Project Context` in `integration_config.md` using `JIRA_PROJECT_KEY`. Let this be `taskSpecificContext`.
    *   If `taskSpecificContext` is found:
        *   Let `fieldsToFetch = ["status"]`.
        *   If `taskSpecificContext.jira_sp_field_id` is defined, add `taskSpecificContext.jira_sp_field_id` to `fieldsToFetch`.
        *   Call `mcp_mcp-atlassian_jira_get_issue` for `JIRA_ISSUE_ID` in its specific project, requesting `fieldsToFetch`.
        *   Let `jiraStatus = result.status.name` (or ID).
        *   Let `jiraSpValue = result.fields[taskSpecificContext.jira_sp_field_id]` if present and `jira_sp_field_id` was fetched.
        *   Let `lineToUpdate = false` and `updatedLineContent = original_line_from_tasks_md`.
        *   Compare `jiraStatus` with local status. If different and `jiraStatus` is a "completed" one (e.g., matches `ARCHIVE` or `REFLECT` status in `taskSpecificContext.jira_status_mapping`), mark task for update to `[x]` in `updatedLineContent` and set `lineToUpdate = true`.
        *   If `jiraSpValue` is available and different from local Story Points (or local SP is missing):
            *   Update `updatedLineContent` to include/replace the SP part (e.g., `SP_VALUE=[jiraSpValue]`). Ensure the format matches `integration_config.md` specifications for `tasks.md` lines. Set `lineToUpdate = true`.
        *   If `lineToUpdate` is true, propose `edit_file` for `tasks.md` to replace the original line with `updatedLineContent`.
*   **Report**: Briefly report sync results, including SP updates if any.

### Step 2: Read Global Project Context & Configs
*   **Action**: Read relevant general context files (e.g., `projectbrief.md` if global, user's initial request for planning).
*   **Action**: Read `integration_config.md` to get the list of all `Project Contexts` and global settings (like SP formula and `tasks.md` format info).

### Step 2.1: Select Active Project Context
*   **Action**: Let `definedContexts` be the list of `Project Contexts` read from `integration_config.md`.
*   **Condition**: If `definedContexts` contains more than one context:
    *   **Action**: Extract `context_name` from each defined context.
    *   **Action**: Ask user: "For which project context are we planning new tasks? Please select from: [List of `context_name`s]."
    *   **Action**: Store the user's selection as `activeProjectContext`.
*   **Condition**: If `definedContexts` contains exactly one context:
    *   **Action**: Automatically select this single context as `activeProjectContext`.
    *   **Report**: "Using project context: '[activeProjectContext.context_name]' for new tasks."
*   **Condition**: If `definedContexts` is empty or not found:
    *   **Report**: "ERROR: No project contexts are defined in `integration_config.md`. Please configure at least one project context."
    *   **Action**: Stop PLAN mode.
*   **Action**: Let `selectedJiraProjectKey = activeProjectContext.jira_project_key`.
*   **Action**: Let `selectedJiraDefaultIssueType = activeProjectContext.jira_default_issue_type`.
*   **Action**: Let `selectedContextName = activeProjectContext.context_name`.

### Step 3: Identify Planning Goal (for selected context)
*   **Action**: Based on the general context and the `activeProjectContext`, clearly state the main goal or feature for which new tasks will be planned.
*   **Report**: "Planning Goal for new tasks in project context '[selectedContextName]': [Formulated Goal]."

### Step 4: Generate Epic/Sprint/Task Plan with Final SP (LLM Task)
*   **Instruction (Prompt for LLM)**: "You are planning for the project context: '[selectedContextName]' (Jira Project: [selectedJiraProjectKey]). Analyze the formulated goal (from Step 3) and project context. Using your understanding of software development and project management:
    1.  Identify 2-5 major logical blocks of work (**Epics**). Give each a clear name.
    2.  For **each Epic**, propose a list of **specific, actionable tasks** (including name and a brief description for each task if possible).
    3.  Group tasks into sequential **Sprints** (e.g., 3-7 tasks each). Name the Sprints.
    4.  **For each task, provide a FINAL Story Point (SP) estimation.** Base this on task complexity. For reference: in this project, 1 SP is approximately 8 developer hours or 10 AI minutes of intensive work (refer to global settings in `integration_config.md` for the exact formula). This SP estimation is definitive. Ensure SPs are presented with the prefix `SP_VALUE=` (e.g., `SP_VALUE=3`, `SP_VALUE=0.5`).
    5.  Format the plan using Markdown: Level 2 headings (`##`) for Epics, Level 3 (`###`) for Sprints, and lists (`- [Task Name] - [Task Description (optional)] - SP_VALUE=[X]`) for tasks. **Do NOT include Jira IDs or context names in this generated plan text, as those will be added later.**"
*   **(Internal LLM Execution)**: AI model processes and generates the plan (Epic -> Sprint -> Task List with Name, SP in SP_VALUE=X format, Description).

### Step 4.1: Check for Duplicate Tasks in Jira (AI Action)
*   **Action**: Search Jira for existing tasks with similar titles in the selected project context.
*   **Action**: Compare generated task names with existing Jira issues.
*   **Action**: Report potential duplicates and ask user for confirmation before proceeding.
*   **Report**: "Duplicate check complete. [X] potential duplicates found."

### Step 5: Output Generated Plan with Final SP
*   **Action**: Output the complete plan generated by LLM.
*   **Report**: "Here is the proposed plan for project context '[selectedContextName]'. SP estimations are final. Next, we'll process these for Jira (project [selectedJiraProjectKey]) and update `tasks.md`."

### Step 5.1: Process Epics & Tasks for Jira Creation (using selected context)
*   **Action**: Initialize an empty list `createdOrUpdatedJiraIssues = []` to store details of issues successfully processed with Jira.
*   **Action**: Determine the initial Jira status for new issues. If `activeProjectContext.jira_status_mapping` exists and has a mapping for a "new" or "todo" equivalent status (e.g., `activeProjectContext.jira_status_mapping.PLAN.start`), use that target status ID. Otherwise, Jira will use its project default.
*   **Action**: For each Epic in the plan from Step 4 (`epicName`, and its list of tasks with SPs now in `SP_VALUE=X` format):
    *   Calculate `totalEpicSp` (parsing X from `SP_VALUE=X`). Create `taskListStringForEpicDesc` (listing tasks with their `SP_VALUE=X`).
    *   Let `baseEpicDescription = "Total Story Points: SP_VALUE=[totalEpicSp]\\nProject Context: \'[selectedContextName]\'\\nTasks:\\n" + taskListStringForEpicDesc`.
    *   Let `finalEpicDescription = (activeProjectContext.jira_description_prefix || "") + baseEpicDescription + (activeProjectContext.jira_description_suffix || "") + "\\n\\nПримечание: Задача создана с помощью ИИ."`.
    *   Let `assigneeLogin = activeProjectContext.Jira_login`.
    *   Let `aiCreatedLabel = "created-by-ai"`.
    *   Let `contextLabel = "context-" + selectedContextName`.
    *   Let `epicLabels = [aiCreatedLabel, contextLabel]`.
    *   If `activeProjectContext.jira_default_labels` AND `activeProjectContext.jira_default_labels.epic` exists, append them to `epicLabels`.
    *   Let `jiraComponent = activeProjectContext.jira_component`.
    *   Let `shouldSetComponent = (jiraComponent != "NO_NAME")`.
    *   Let `componentsPayloadEpic = shouldSetComponent ? [jiraComponent] : []`.
    *   Let `customFieldsPayloadEpic = {}`.
    *   If `activeProjectContext.jira_sp_field_id` AND `totalEpicSp` is not null:
        *   `customFieldsPayloadEpic[activeProjectContext.jira_sp_field_id] = totalEpicSp`.
    *   If `activeProjectContext.jira_custom_fields` AND `activeProjectContext.jira_custom_fields.epic` exists:
        *   For each `field` in `activeProjectContext.jira_custom_fields.epic`:
            *   `customFieldsPayloadEpic[field.id] = field.value // Adapt value if dynamic based on epic data`.
    *   **Condition**: If `totalEpicSp < 7` AND `activeProjectContext.jira_consolidate_small_epics` is true:
        *   Ask user: "Epic '[epicName]' has SP [totalEpicSp] (<7). Consolidate tasks directly into this Epic description without creating separate sub-tasks in Jira?".
        *   If user agrees:
            *   Call `mcp_mcp-atlassian_jira_create_issue` for Epic (project `selectedJiraProjectKey`, summary `epicName`, type 'Epic', description `finalEpicDescription`, assignee `assigneeLogin`, labels `epicLabels`, components `componentsPayloadEpic`, custom_fields `customFieldsPayloadEpic`).
            *   If successful (let `newlyCreatedEpicKey` be the key), add `{jira_id: newlyCreatedEpicKey, title: epicName, sp_value: totalEpicSp, description: taskListStringForEpicDesc, is_epic_only: true}` to `createdOrUpdatedJiraIssues`.
            *   Report success. If `activeProjectContext.jira_auto_assign_on_create` is true AND `assigneeLogin` is not empty, propose `mcp_mcp-atlassian_jira_assign_issue` for `newlyCreatedEpicKey` to `assigneeLogin`.
        *   If user disagrees, proceed as if `totalEpicSp >= 7`.
    *   **Condition**: Else (`totalEpicSp >= 7` or user disagreed with consolidation or `activeProjectContext.jira_consolidate_small_epics` is false):
        *   Ask user: "Create Epic '[epicName]' in Jira? Its tasks will be created as sub-tasks."
        *   If user agrees:
            *   Call `mcp_mcp-atlassian_jira_create_issue` for Epic (project `selectedJiraProjectKey`, summary `epicName`, type 'Epic', description `finalEpicDescription`, assignee `assigneeLogin`, labels `epicLabels`, components `componentsPayloadEpic`, custom_fields `customFieldsPayloadEpic`).
            *   If successful, let `parentEpicKey` be the new Jira key. Add `{jira_id: parentEpicKey, title: epicName, sp_value: totalEpicSp, description: "(Epic - tasks listed separately as sub-tasks)", is_epic_only: false, sub_tasks: []}` to `createdOrUpdatedJiraIssues`.
            *   Report success. If `activeProjectContext.jira_auto_assign_on_create` is true AND `assigneeLogin` is not empty, propose `mcp_mcp-atlassian_jira_assign_issue` for `parentEpicKey` to `assigneeLogin`.
            *   For each task (`taskName`, `taskSpValue` (e.g., "SP_VALUE=3"), `taskDescription`) under this Epic:
                *   Let `parsedTaskSp = X` (from `taskSpValue`).
                *   Let `baseTaskDescription = "Story Points: SP_VALUE=[parsedTaskSp]\\nProject Context: \'[selectedContextName]\'\\n\\nOriginal Description:\\n" + taskDescription`.
                *   Let `finalTaskDescription = (activeProjectContext.jira_description_prefix || "") + baseTaskDescription + (activeProjectContext.jira_description_suffix || "") + "\\n\\nПримечание: Задача создана с помощью ИИ."`.
                *   Let `taskLabels = [aiCreatedLabel, contextLabel]`.
                *   If `activeProjectContext.jira_default_labels` AND `activeProjectContext.jira_default_labels.task` exists, append them to `taskLabels`.
                *   Let `componentsPayloadTask = shouldSetComponent ? [jiraComponent] : []`. // Or task-specific component if defined
                *   Let `customFieldsPayloadTask = {}`.
                *   If `activeProjectContext.jira_sp_field_id` AND `parsedTaskSp` is not null:
                    *   `customFieldsPayloadTask[activeProjectContext.jira_sp_field_id] = parsedTaskSp`.
                *   If `activeProjectContext.jira_custom_fields` AND `activeProjectContext.jira_custom_fields.task` exists:
                    *   For each `field` in `activeProjectContext.jira_custom_fields.task`:
                        *   `customFieldsPayloadTask[field.id] = field.value // Adapt value if dynamic based on task data`.
                *   Ask user to create Jira issue for task '[taskName]'. If yes:
                    *   Call `mcp_mcp-atlassian_jira_create_issue` for Task (project `selectedJiraProjectKey`, summary `taskName`, type `selectedJiraDefaultIssueType`, description `finalTaskDescription`, parent `parentEpicKey`, assignee `assigneeLogin`, labels `taskLabels`, components `componentsPayloadTask`, custom_fields `customFieldsPayloadTask`).
                    *   If successful (let `newlyCreatedTaskKey` be the key), add/append to `sub_tasks` of the parent Epic in `createdOrUpdatedJiraIssues`: `{jira_id: newlyCreatedTaskKey, title: taskName, sp_value: parsedTaskSp, description: taskDescription}`.
                    *   Report success.
                    *   If `activeProjectContext.jira_auto_assign_on_create` is true AND `assigneeLogin` is not empty:
                        *   Propose `