---
description: 
globs: 
alwaysApply: false
---
---
description: Visual process map for REFLECT mode (Task Reflection)
globs: "**/reflect*/**", "**/review*/**", "**/retrospect*/**"
alwaysApply: false
---

# REFLECT MODE: TASK REVIEW PROCESS MAP (Multi-Context)

> **TL;DR:** Guides structured review of a completed Jira task (selected from `tasks.md` for a chosen Project Context), documenting lessons learned, updating Jira, and syncing `tasks.md`.

## üß≠ REFLECT MODE PROCESS FLOW

```mermaid
graph TD
    Start["START REFLECT MODE"] --> ReadGlobalConfig["Step 0.1: Read Global Configs"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    SelectActiveContext --> AutoSyncTasksMD["Step 1: Auto-Sync tasks.md with Jira (all contexts)"]
    AutoSyncTasksMD --> GetJiraTask["Step 2: Select Task from tasks.md for Reflection (filtered by active context)"]

    GetJiraTask --> VerifyImplement{"Implementation Complete for [selectedJiraIssueKey]? (Check Jira Status or progress.md)"}
    VerifyImplement -->|"No"| ReturnImplement["Return to<br>IMPLEMENT Mode for [selectedJiraIssueKey]"]
    VerifyImplement -->|"Yes"| AssessLevel{"Determine<br>Complexity Level (from Jira for [selectedJiraIssueKey] or user)"}
    
    %% Level-Based Reflection (focused on selectedJiraIssueKey)
    AssessLevel -->|"Level 1"| L1Reflect["LEVEL 1 REFLECTION"]
    AssessLevel -->|"Level 2"| L2Reflect["LEVEL 2 REFLECTION"]
    AssessLevel -->|"Level 3"| L3Reflect["LEVEL 3 REFLECTION"]
    AssessLevel -->|"Level 4"| L4Reflect["LEVEL 4 REFLECTION"]
    
    L1Reflect --> L1Review["Review<br>Bug Fix ([selectedJiraIssueKey])"]
    L1Review --> L1Document["Document<br>Solution in reflection.md"]
    L1Document --> L1JiraUpdate["Update Jira Task Status for [selectedJiraIssueKey]<br>to ReflectCompleteStatus (from context)"]
    
    L2Reflect --> L2Review["Review<br>Enhancement ([selectedJiraIssueKey])"]
    L2Review --> L2WWW["Document What Went Well"]
    L2WWW --> L2Challenges["Document Challenges"]
    L2Challenges --> L2Lessons["Document Lessons Learned"]
    L2Lessons --> L2JiraUpdate["Update Jira Task Status for [selectedJiraIssueKey]<br>to ReflectCompleteStatus (from context)"]
    
    L3Reflect & L4Reflect --> L34Review["Review Implementation & Creative Phases<br>(for [selectedJiraIssueKey])"]
    L34Review --> L34Plan["Compare Against Original Plan"]
    L34Plan --> L34WWW["Document What Went Well"]
    L34WWW --> L34Challenges["Document Challenges"]
    L34Challenges --> L34Lessons["Document Lessons Learned"]
    L34Lessons --> L34ImproveProcess["Document Process Improvements"]
    L34ImproveProcess --> L34JiraUpdate["Update Jira Task Status for [selectedJiraIssueKey]<br>to ReflectCompleteStatus (from context)"]
    
    %% Completion & Transition
    L1JiraUpdate & L2JiraUpdate & L34JiraUpdate --> UpdateTasksMDWithReflection["Step X.1: Update tasks.md with Reflection Completion"]
    UpdateTasksMDWithReflection --> CreateReflectionDoc["Create/Update reflection-[selectedJiraIssueKey].md"]
    CreateReflectionDoc --> UpdateSystemDocs["Update System Documentation (if needed, for context '[activeProjectContext.context_name]')"]
    UpdateSystemDocs --> VerifyReview["Verify<br>Reflection Complete"]
    VerifyReview -->|"Yes"| ReflectComplete[\"REFLECT COMPLETE for [selectedJiraIssueKey]<br>Ready for ARCHIVE\"]

    ReflectComplete --> SuggestArchive[\"Suggest ARCHIVE Mode for [selectedJiraIssueKey]\"]

    VerifyReview -->|"No"| ReviseWork[\"Revise Work or<br>Reflection Documentation\"]
    ReviseWork --> L34Review %% Or appropriate review starting point

    style ReflectComplete fill:#10b981,stroke:#059669,color:white
    style UpdateJiraStatus fill:#5e72e4,stroke:#324cdd,color:white
    style UpdateTasksMDWithReflection fill:#FFD700,stroke:#B8860B,color:black
    style SuggestArchive fill:#10b981,stroke:#059669,color:white
```

## üìã REFLECTION STRUCTURE

The reflection should follow this structured format:

```mermaid
graph TD
    subgraph "Reflection Document Structure"
        Header["# TASK REFLECTION: [Task Name]"]
        Summary["## SUMMARY<br>Brief summary of completed task"]
        WWW["## WHAT WENT WELL<br>Successful aspects of implementation"]
        Challenges["## CHALLENGES<br>Difficulties encountered during implementation"]
        Lessons["## LESSONS LEARNED<br>Key insights gained from the experience"]
        ProcessImp["## PROCESS IMPROVEMENTS<br>How to improve for future tasks"]
        TechImp["## TECHNICAL IMPROVEMENTS<br>Better approaches for similar tasks"]
        NextSteps["## NEXT STEPS<br>Follow-up actions or future work"]
    end
    
    Header --> Summary --> WWW --> Challenges --> Lessons --> ProcessImp --> TechImp --> NextSteps
```

## üìä REQUIRED FILE STATE VERIFICATION (Adapted)

*   **Instruction for AI**: Verification focuses on:
    1.  `activeProjectContext` is selected.
    2.  `tasks.md` exists.
    3.  A task (`selectedTaskLine`) is chosen from `tasks.md` for reflection, belonging to `activeProjectContext`.
    4.  `selectedJiraIssueKey` is parsed.
    5.  Jira task `selectedJiraIssueKey` (in project `selectedJiraProjectKey`) is in a state indicating implementation/QA completion (e.g., status from `activeProjectContext.jira_status_mapping.IMPLEMENT` or a `QA_PASSED` status).

## üîç IMPLEMENTATION REVIEW APPROACH

```mermaid
graph TD
    subgraph "Implementation Review"
        Original["Review Original<br>Requirements"]
        Plan["Compare Against<br>Implementation Plan"]
        Actual["Assess Actual<br>Implementation"]
        Creative["Review Creative<br>Phase Decisions"]
        Changes["Identify Deviations<br>from Plan"]
        Results["Evaluate<br>Results"]
    end
    
    Original --> Plan --> Actual
    Plan --> Creative --> Changes
    Actual --> Results
    Changes --> Results
```

## üìù REFLECTION DOCUMENT TEMPLATES

### Level 1 (Basic) Reflection
```
# Bug Fix Reflection: [Bug Name]

## Summary
[Brief description of the bug and solution]

## Implementation
[Description of the fix implemented]

## Testing
[Description of testing performed]

## Additional Notes
[Any other relevant information]
```

### Levels 2-4 (Comprehensive) Reflection
```
# Task Reflection: [Task Name]

## Summary
[Brief summary of the task and what was achieved]

## What Went Well
- [Success point 1]
- [Success point 2]
- [Success point 3]

## Challenges
- [Challenge 1]: [How it was addressed]
- [Challenge 2]: [How it was addressed]
- [Challenge 3]: [How it was addressed]

## Lessons Learned
- [Lesson 1]
- [Lesson 2]
- [Lesson 3]

## Process Improvements
- [Process improvement 1]
- [Process improvement 2]

## Technical Improvements
- [Technical improvement 1]
- [Technical improvement 2]

## Next Steps
- [Follow-up task 1]
- [Follow-up task 2]
```

## üìä REFLECTION QUALITY METRICS

```mermaid
graph TD
    subgraph "Reflection Quality Metrics"
        Specific["Specific<br>Not general or vague"]
        Actionable["Actionable<br>Provides clear direction"]
        Honest["Honest<br>Acknowledges successes and failures"]
        Forward["Forward-Looking<br>Focuses on future improvement"]
        Evidence["Evidence-Based<br>Based on concrete examples"]
    end
```

## üìã TASKS.MD UPDATE FORMAT (Adapted)

*   **Instruction for AI**: After Jira status is updated to reflect completion (e.g., to `activeProjectContext.jira_status_mapping.REFLECT`), the corresponding line in `tasks.md` for `selectedJiraIssueKey` should be updated. This might involve changing the status checkbox `[ ]` to `[x]` if REFLECT is considered a final local step before ARCHIVE, or adding a note like "- Reflection Complete" to the description part of the string.

## üìä REFLECTION VERIFICATION CHECKLIST (Adapted)

*   **Instruction for AI**: Checklist should verify:
    1.  Implementation for `selectedJiraIssueKey` (in `activeProjectContext.context_name`) reviewed.
    2.  Reflection document `reflection-[selectedJiraIssueKey].md` completed.
    3.  Jira task `selectedJiraIssueKey` status updated to `activeProjectContext.jira_status_mapping.REFLECT`.
    4.  `tasks.md` entry for `selectedJiraIssueKey` updated to reflect reflection completion.

## üîÑ MODE TRANSITION NOTIFICATION (Adapted)

*   **Instruction for AI**: Notification should confirm reflection for `selectedJiraIssueKey` (context '[activeProjectContext.context_name]'), mention `tasks.md` and Jira updates, suggest ARCHIVE mode.

## ü§î DETAILED REFLECTION STEPS

### Step 0.1: Read Global Configs
*   **Action**: Read `integration_config.md` for `Project Contexts`, global settings, `tasks.md` format.

### Step 0.2: Select Active Project Context
*   **Action**: (As defined previously - user selects `activeProjectContext`).
*   **Action**: Store `selectedJiraProjectKey`, `selectedJiraStatusMapping`, `selectedContextName`.

### Step 1: Auto-Sync tasks.md with Jira (all contexts)
*   **Action**: (As defined in `implement-mode-map.mdc` - read `tasks.md`, parse details, check Jira, propose `tasks.md` updates for completed/misaligned tasks).
*   **Report**: "`tasks.md` sync check complete."

### Step 2: Select Task from tasks.md for Reflection (filtered by active context) (was Step 0.3)
*   **Action**: Read `tasks.md`. Filter tasks by `(Context: [selectedContextName])` and status indicating ready for reflection (e.g., not `[x]`, or a specific prior status like "Implemented").
*   **Action**: Ask user: "Select a task for reflection (context '[selectedContextName]') or provide Jira Issue Key ([selectedJiraProjectKey]-XXX):\n[Filtered list]"
*   **Condition**: If user selects line: Store `selectedTaskLine`. Parse `selectedJiraIssueKey`, `taskTitle`.
*   **Condition**: If user provides Jira Key: Verify, store `selectedJiraIssueKey`. Try to find in `tasks.md` for `selectedTaskLine`. Fetch title from Jira.
*   **Error Handling**: If no task, stop.
*   **Report**: "Performing reflection for: [selectedJiraIssueKey] - [taskTitle] (context '[selectedContextName]')."
*   *(Fetch task details from Jira for context, especially current status)*

### Step (Verify Implementation Complete - Part of old Step 0.3 / Initial Assessment)
*   **Action**: Check current status of `selectedJiraIssueKey` in Jira.
*   **Action**: Let `implementationCompleteStatus` be `selectedJiraStatusMapping.IMPLEMENT` (or a QA_PASSED status if QA is a pre-requisite).
*   **Condition**: If Jira status is NOT `implementationCompleteStatus` (or a later one like `REFLECT` or `ARCHIVE`):
    *   **Report**: "Task [selectedJiraIssueKey] is not yet marked as implementation complete in Jira (current status: [JiraStatus]). Please complete IMPLEMENT or QA mode first."
    *   **Action**: Offer to return to IMPLEMENT mode or stop REFLECT mode.

### Step (Main Reflection Logic - L1 to L4 based on complexity of [selectedJiraIssueKey])
*   Determine complexity for `selectedJiraIssueKey` (from SP in `selectedTaskLine` or Jira description, or ask user).
*   Perform level-based reflection (L1Review, L2WWW, L34Review etc.) focusing on `selectedJiraIssueKey`.
*   Document findings in a file like `reflection-docs/reflection-[selectedJiraIssueKey].md`.

### Step (Update Jira Status)
*   **Action**: Let `reflectStatusKey = "REFLECT_COMPLETE"` (This key should be defined in `integration_config.md` under `jira_status_mapping` for each context, e.g., `REFLECT_COMPLETE: "Ready for Archive"`).
*   **Action**: Let `reflectCompleteStatus = activeProjectContext.jira_status_mapping[reflectStatusKey]`.
*   **Condition**: If `reflectCompleteStatus` is not defined or empty:
    *   **Report**: "Warning: Jira status for reflection completion (key '[reflectStatusKey]') is not defined in the `jira_status_mapping` for context '[activeProjectContext.context_name]'. Jira status will not be updated."
    *   **Action**: Set `jiraStatusUpdatedInReflect = false`. Proceed to next step.
*   **Condition**: Else (status is defined):
    *   **Action**: Ask user: "Reflection for [selectedJiraIssueKey] documented. Update Jira status to '[reflectCompleteStatus]' for project '[selectedJiraProjectKey]'?"
    *   **Condition**: If user agrees:
        *   **Action**: Call `mcp_mcp-atlassian_jira_transition_issue` (or `update_issue`) for `selectedJiraIssueKey` in `selectedJiraProjectKey` to `reflectCompleteStatus`.
        *   **Report**: "Jira Task [selectedJiraIssueKey] status updated to '[reflectCompleteStatus]'."
        *   Set `jiraStatusUpdatedInReflect = true`.
    *   **Condition**: Else (user disagrees):
        *   **Report**: "Jira status not updated for [selectedJiraIssueKey] as per user request."
        *   Set `jiraStatusUpdatedInReflect = false`.

### Step (Update `tasks.md` with Reflection Completion)
*   **Condition**: If `jiraStatusUpdatedInReflect` is true AND `selectedTaskLine` is not null:
    *   **Action**: Propose `edit_file` for `tasks.md` to update `selectedTaskLine` by appending a note like "- Reflection Complete." to its description. The checkbox `[ ]` should remain unchanged at this stage.
    *   **Report**: "`tasks.md` updated for [selectedJiraIssueKey] (Context: [activeProjectContext.context_name]) to reflect completion of reflection phase."
*   **Condition**: If `selectedTaskLine` was null and `jiraStatusUpdatedInReflect` is true (task was handled only via Jira ID):
    *   **Action**: Formulate new task line for `tasks.md` including `selectedJiraIssueKey`, `taskTitle`, `selectedJiraProjectKey`, `activeProjectContext.context_name`, SP (if known or default to 0), and the note "- Reflection Complete.".
    *   **Action**: Propose `edit_file` to append this new line to `tasks.md`.
    *   **Report**: "New entry for [selectedJiraIssueKey] (Context: [activeProjectContext.context_name]) with reflection completion noted added to `tasks.md`."

### Step (Transition to ARCHIVE)
*   **Report**: "Reflection for [selectedJiraIssueKey] complete. Recommended next: ARCHIVE Mode."

```
‚úì REFLECT COMPLETE
Task review finalized.
Jira Story status updated based on configuration.
Ready for ARCHIVE mode.
Type 'ARCHIVE' to begin final documentation.

``` 