---
description: Visual process map for ARCHIVE mode (Task Documentation)
globs: "**/archive*/**", "**/document*/**", "**/complete*/**"
alwaysApply: false
---

# ARCHIVE MODE: TASK DOCUMENTATION PROCESS MAP

> **TL;DR:** This visual map guides the ARCHIVE mode process, focusing on creating comprehensive documentation of the completed task (identified by its Jira ID from a selected Project Context), archiving relevant files, and updating configurations for future reference.

## üß≠ ARCHIVE MODE PROCESS FLOW

```mermaid
graph TD
    Start["START ARCHIVE MODE"] --> ReadGlobalConfig["Step 0.1: Read Global Configs"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    
    SelectActiveContext --> GetJiraTask["Step 0.3: Identify Jira Task to Archive"]
    GetJiraTask --> ReadLocalDocs["Step 1: Read reflection.md & progress.md (if they exist)"]
    
    %% Initial Assessment
    ReadLocalDocs --> VerifyReflect{"Reflection<br>Complete? (based on reflection.md or Jira status)"}
    VerifyReflect -->|"No"| ReturnReflect["Return to<br>REFLECT Mode"]
    VerifyReflect -->|"Yes"| AssessLevel{"Determine<br>Complexity Level (from Jira or user input)"}
    
    %% Level-Based Archiving (This section might need to be re-evaluated if tasks.md was central to it)
    AssessLevel -->|"Level 1"| L1Archive["LEVEL 1 ARCHIVING<br>Level1/archive-minimal.md"]
    AssessLevel -->|"Level 2"| L2Archive["LEVEL 2 ARCHIVING<br>Level2/archive-basic.md"]
    AssessLevel -->|"Level 3"| L3Archive["LEVEL 3 ARCHIVING<br>Level3/archive-standard.md"]
    AssessLevel -->|"Level 4"| L4Archive["LEVEL 4 ARCHIVING<br>Level4/archive-comprehensive.md"]
    
    %% Level 1 Archiving (Minimal)
    L1Archive --> L1Summary["Create Quick<br>Summary (for Jira Task [SelectedJiraID])"]
    L1Summary --> L1JiraUpdate["Update Jira Task [SelectedJiraID]<br>Status to Archived/Closed (using context status mapping)"]
    L1JiraUpdate --> L1Complete["Mark Task as<br>Locally Processed"]
    
    %% Level 2 Archiving (Basic)
    L2Archive --> L2Summary["Create Basic<br>Archive Document (for Jira Task [SelectedJiraID])"]
    L2Summary --> L2Doc["Document<br>Changes"]
    L2Doc --> L2JiraUpdate["Update Jira Task [SelectedJiraID]<br>Status to Archived/Closed (using context status mapping)"]
    L2JiraUpdate --> L2Progress["Update<br>progress.md (if used)"]
    L2Progress --> L2Complete["Mark Task as<br>Locally Processed"]
    
    %% Level 3-4 Archiving (Comprehensive)
    L3Archive & L4Archive --> L34Summary["Create Comprehensive<br>Archive Document (for Jira Task [SelectedJiraID])"]
    L34Summary --> L34Doc["Document<br>Implementation"]
    L34Doc --> L34Creative["Archive Creative<br>Phase Documents (if any)"]
    L34Creative --> L34Code["Document Code<br>Changes"]
    L34Code --> L34Test["Document<br>Testing"]
    L34Test --> L34Lessons["Summarize<br>Lessons Learned"]
    L34Lessons --> L34JiraUpdate["Update Jira Task [SelectedJiraID]<br>Status to Archived/Closed (using context status mapping)"]
    L34JiraUpdate --> L34Progress["Update<br>progress.md (if used)"]
    L34Progress --> L34System["Update System<br>Documentation (if applicable)"]
    L34System --> L34Complete["Mark Task as<br>Locally Processed"]
    
    %% Completion
    L1Complete & L2Complete & L34Complete --> CreateLocalArchiveDoc[\"Create Archive<br>Document in<br>docs/archive/ (for [SelectedJiraID])\"]

    %% LOCAL DOCS & CONFLUENCE INTEGRATION START
    CreateLocalArchiveDoc --> VerifyDocsDir[\"Verify/Create<br>docs/archive/ directory\"]
    VerifyDocsDir --> WriteLocalDoc[\"Write Summary<br>to docs/archive/ (for [SelectedJiraID])\"]
    WriteLocalDoc --> UpdateConfluence[\"Update/Create Confluence Page<br>(using selected context's space_key)\"]
    UpdateConfluence --> UpdateActiveContextMD[\"Update<br>activeContext.md (clear current task)\"]
    %% LOCAL DOCS & CONFLUENCE INTEGRATION END

    %% DEVOPS INTEGRATION START
    UpdateActiveContextMD --> GitLabTag[\"Create Release Tag in GitLab<br>(using selected context's repo_url)\"]
    GitLabTag --> VercelCheck[\"Check Vercel Deployment (Optional, using context's vercel_id)\"]
    VercelCheck --> Reset[\"Reset for<br>Next Task\"]
    %% DEVOPS INTEGRATION END

    %% Node Styles
    style CreateLocalArchiveDoc fill:#87CEEB,stroke:#4682B4,color:black
    style VerifyDocsDir fill:#DAA520,stroke:#B8860B,color:black
    style WriteLocalDoc fill:#90EE90,stroke:#3CB371,color:black
    style UpdateConfluence fill:#2dce89,stroke:#24a46d,color:white
    style UpdateActiveContextMD fill:#FFD700,stroke:#B8860B,color:black
    style GitLabTag fill:#6f42c1,stroke:#5a32a3,color:white
    style VercelCheck fill:#ee5253,stroke:#c0392b,color:white
    style Reset fill:#FFA07A,stroke:#CD5C5C,color:black
```

## üìã ARCHIVE DOCUMENT STRUCTURE

The archive document should follow this structured format:

```mermaid
graph TD
    subgraph "Archive Document Structure"
        Header["# TASK ARCHIVE: [Task Name]"]
        Meta["## METADATA<br>Task info, dates, complexity"]
        Summary["## SUMMARY<br>Brief overview of the task"]
        Requirements["## REQUIREMENTS<br>What the task needed to accomplish"]
        Implementation["## IMPLEMENTATION<br>How the task was implemented"]
        Testing["## TESTING<br>How the solution was verified"]
        Lessons["## LESSONS LEARNED<br>Key takeaways from the task"]
        Refs["## REFERENCES<br>Links to related documents"]
    end
    
    Header --> Meta --> Summary --> Requirements --> Implementation --> Testing --> Lessons --> Refs
```

## üìä REQUIRED FILE STATE VERIFICATION

*   **Instruction for AI**: This section needs significant rework as `tasks.md` is no longer the primary source. Verification should focus on:
    1.  A Jira task ID for archiving has been identified for the selected `activeProjectContext`.
    2.  `reflection.md` (if used for this task) exists and its content is finalized.
    3.  `progress.md` (if used) reflects completed implementation steps.
    4.  The corresponding Jira task is in a state ready for archiving (e.g., "Resolved", "QA Passed" - based on `activeProjectContext.jira_status_mapping`).

```mermaid
graph TD
    Start["File/State<br>Verification"] --> JiraTaskSelected{"Jira Task for Archive<br>Identified in activeProjectContext?"}
    JiraTaskSelected -->|"No"| ErrorNoTask["ERROR:<br>No Jira task selected for archiving. Please specify."]
    JiraTaskSelected -->|"Yes"| CheckReflectMD{"reflection.md <br>(for [SelectedJiraID])<br>exists & complete?"}
    
    CheckReflectMD -->|"No (or not applicable)"| SkipReflectCheck --"Proceed with caution or return to REFLECT"--> CheckProgressMD
    CheckReflectMD -->|"Yes"| CheckProgressMD{"progress.md <br>(for [SelectedJiraID])<br>updated?"}
    
    CheckProgressMD -->|"No (or not applicable)"| SkipProgressCheck --"Proceed with caution"--> CheckJiraStatus
    CheckProgressMD -->|"Yes"| CheckJiraStatus{"Jira Task [SelectedJiraID]<br>Status allows Archiving? (Use context mapping)"}

    CheckJiraStatus -->|"No"| ErrorJiraState["ERROR:<br>Jira task not in correct state for archiving for project [activeProjectContext.context_name]."]
    CheckJiraStatus -->|"Yes"| ReadyArchive["Ready for<br>Archiving for [SelectedJiraID]"]
```

## üîç ARCHIVE TYPES BY COMPLEXITY

```mermaid
graph TD
    subgraph "Level 1: Minimal Archive"
        L1A["Basic Bug<br>Description"]
        L1B["Solution<br>Summary"]
        L1C["Affected<br>Files"]
    end
    
    subgraph "Level 2: Basic Archive"
        L2A["Enhancement<br>Description"]
        L2B["Implementation<br>Summary"]
        L2C["Testing<br>Results"]
        L2D["Lessons<br>Learned"]
    end
    
    subgraph "Level 3-4: Comprehensive Archive"
        L3A["Detailed<br>Requirements"]
        L3B["Architecture/<br>Design Decisions"]
        L3C["Implementation<br>Details"]
        L3D["Testing<br>Strategy"]
        L3E["Performance<br>Considerations"]
        L3F["Future<br>Enhancements"]
        L3G["Cross-References<br>to Other Systems"]
    end
    
    L1A --> L1B --> L1C
    
    L2A --> L2B --> L2C --> L2D
    
    L3A --> L3B --> L3C --> L3D --> L3E --> L3F --> L3G
```

## üìù ARCHIVE DOCUMENT TEMPLATES

### Level 1 (Minimal) Archive
```
# Bug Fix Archive: [Bug Name]

## Date
[Date of fix]

## Summary
[Brief description of the bug and solution]

## Implementation
[Description of the fix implemented]

## Files Changed
- [File 1]
- [File 2]
```

### Levels 2-4 (Comprehensive) Archive
```
# Task Archive: [Task Name]

## Metadata
- **Complexity**: Level [2/3/4]
- **Type**: [Enhancement/Feature/System]
- **Date Completed**: [Date]
- **Related Tasks**: [Related task references]

## Summary
[Comprehensive summary of the task]

## Requirements
- [Requirement 1]
- [Requirement 2]
- [Requirement 3]

## Implementation
### Approach
[Description of implementation approach]

### Key Components
- [Component 1]: [Description]
- [Component 2]: [Description]

### Files Changed
- [File 1]: [Description of changes]
- [File 2]: [Description of changes]

## Testing
- [Test 1]: [Result]
- [Test 2]: [Result]

## Lessons Learned
- [Lesson 1]
- [Lesson 2]
- [Lesson 3]

## Future Considerations
- [Future enhancement 1]
- [Future enhancement 2]

## References
- [Link to reflection document]
- [Link to creative phase documents]
- [Other relevant references]
```

## üìã ARCHIVE LOCATION AND NAMING

Archive documents should be organized following this pattern:

```mermaid
graph TD
    subgraph "Archive Structure"
        Root["docs/archive/"]
        Tasks["tasks/"]
        Features["features/"]
        Systems["systems/"]
        
        Root --> Tasks
        Root --> Features
        Root --> Systems
        
        Tasks --> Bug["bug-fix-name-YYYYMMDD.md"]
        Tasks --> Enhancement["enhancement-name-YYYYMMDD.md"]
        Features --> Feature["feature-name-YYYYMMDD.md"]
        Systems --> System["system-name-YYYYMMDD.md"]
    end
```

## üìä TASKS.MD FINAL UPDATE
*   **Instruction for AI**: This section is OBSOLETE as `tasks.md` is no longer directly managed for status. Final status update happens in Jira. Remove this section or re-purpose for local log if any.

## üìã ARCHIVE VERIFICATION CHECKLIST
```
‚úì ARCHIVE VERIFICATION (for Jira Task: [SelectedJiraID] in Project: [activeProjectContext.context_name])
- Reflection for [SelectedJiraID] completed and reviewed? [YES/NO/NA]
- Archive document created for [SelectedJiraID] with all sections? [YES/NO]
- Archive document placed in `docs/archive/`? [YES/NO]
- Local summary file for [SelectedJiraID] created in `docs/archive/`? [YES/NO]
- Confluence page for [SelectedJiraID] created/updated in space '[activeProjectContext.confluence_space_key]' for [SelectedJiraID]? [YES/NO]
- Jira Task [SelectedJiraID] status updated to Archived/Closed (using '[activeProjectContext.jira_status_mapping.ARCHIVE]' status)? [YES/NO]
- `progress.md` (if used) updated with archive reference for [SelectedJiraID]? [YES/NO/NA]
- `activeContext.md` cleared or updated for next task? [YES/NO]
- Creative phase documents for [SelectedJiraID] archived (if Level 3-4)? [YES/NO/NA]
- Release tag for [SelectedJiraID] created in GitLab (repo: '[activeProjectContext.gitlab_repo_url]')? [YES/NO]
- Vercel deployment for [SelectedJiraID] verified (if applicable, project: '[activeProjectContext.vercel_project_id]')? [YES/NO/NA]

‚Üí If all YES: Archiving complete for [SelectedJiraID]. Memory Bank reset for next task.
‚Üí If any NO: Complete missing archive elements for [SelectedJiraID].
```

## üìã TASK COMPLETION NOTIFICATION (for selected context)

- **Step Pre: Identify Jira Task and Context**
    - This mode assumes an `activeProjectContext` has been selected and a specific `SelectedJiraID` (the Jira issue key of the task to be archived) is known.

- **Update Confluence Page**:
    - **Action**: Read `integration_config.md` to get `activeProjectContext.confluence_space_key`.
    - **Action**: Read the generated archive summary for `SelectedJiraID`.
    - **Action**: Call `mcp_mcp-atlassian_confluence_create_page`.
    - **Parameters**:
        - `space_key`: `activeProjectContext.confluence_space_key`
        - `title`: "Task Summary: [SelectedJiraID] - [Task Title from Jira] (Context: [activeProjectContext.context_name])"
        - `content`: Markdown summary content.
        - `parent_id`: (Optional, may ask user or have a default per context)
    - **Error Handling**: If MCP call fails, report error, try again once. If it fails again, report error and ask user how to proceed.

- **Create GitLab Release Tag**:
    - **Action**: Read `activeProjectContext.gitlab_repo_url` (or project_url) and `activeProjectContext.jira_project_key` (to form part of the tag or message if needed).
    - **Action**: Ask user: "Create a GitLab release tag for task [SelectedJiraID] in project '[activeProjectContext.context_name]'? Specify version (e.g., v1.x.y) or use default format."
    - **Action**: Based on user response, propose `run_terminal_cmd` for:
        - `python devops-tools/gitlab/gitlab_tools.py create-tag --repo_url [activeProjectContext.gitlab_repo_url] --name v1.X.Y --message "Task [SelectedJiraID] completed: [Task Title from Jira]"`
    - **Error Handling**: If tag creation fails, report error.

- **Verify Vercel Deployment (Optional)**:
    - **Condition**: Check if `activeProjectContext` has `vercel_project_id` defined.
    - **Action**: If yes, ask user: "Do you use Vercel for project '[activeProjectContext.context_name]'? Verify production deployment for [SelectedJiraID]?"
    - **Condition**: If user agrees:
        *   **Action**: Propose `run_terminal_cmd` command: `python devops-tools/vercel/vercel_tools.py status --prod --project_id [activeProjectContext.vercel_project_id] --team_id [activeProjectContext.vercel_team_id]`
        *   **Action**: Based on result, ask: "Trigger new production deployment on Vercel for project '[activeProjectContext.context_name]'?"
        *   **Condition**: If user agrees:
            *   **Action**: Propose `run_terminal_cmd`: `python devops-tools/vercel/vercel_tools.py deploy --prod --project_id [activeProjectContext.vercel_project_id] --team_id [activeProjectContext.vercel_team_id]`

Then show the final notification (mentioning the context):

```
## TASK ARCHIVED (in Project Context: [activeProjectContext.context_name])

‚úÖ Archive document created in docs/archive/ for [SelectedJiraID]
‚úÖ Local summary file saved in docs/archive/ for [SelectedJiraID]
‚úÖ Confluence page created/updated in space '[activeProjectContext.confluence_space_key]' for [SelectedJiraID]
‚úÖ Release tag created in GitLab repository '[activeProjectContext.gitlab_repo_url]' for [SelectedJiraID]
‚úÖ Vercel deployment verified for [SelectedJiraID] (if applicable, project: '[activeProjectContext.vercel_project_id]')
‚úÖ All task documentation for [SelectedJiraID] preserved
‚úÖ Jira Task [SelectedJiraID] status updated to Archived/Closed in project [activeProjectContext.jira_project_key]

‚Üí Memory Bank is ready for the next task.
‚Üí To start a new task, use VAN MODE.
```

*Note for AI: Remember the MCP error handling rules (retry once) and deletion of temporary files if they were used.*