---
description: Visual process map for BUILD mode (Code Implementation)
globs: implementation-mode-map.mdc
alwaysApply: false
---
# BUILD MODE (IMPLEMENT): CODE EXECUTION PROCESS MAP (Multi-Context)

> **TL;DR:** Guides implementation for a task selected from `tasks.md` (within a chosen Project Context), tracks progress in Jira, updates `tasks.md`, and integrates with DevOps tools.

**Key Enhancements:**
- DevOps integration (GitLab CI/CD)
- Standardized commit message format
- Epic-aware Git workflow
- Multi-context project support
- Automated pipeline checks

## üß≠ BUILD MODE PROCESS FLOW

```mermaid
graph TD
    Start["IMPLEMENT Mode Start"] --> ReadGlobalConfig["Step 0.1: Read Global Configs"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    SelectActiveContext --> AutoSyncTasksMD["Step 1: Auto-Sync tasks.md with Jira (for all contexts)"]
    AutoSyncTasksMD --> TaskSelect["Step 2: Select Task from tasks.md for Implementation (filtered by active context)"]
    TaskSelect --> JiraStatusAssigneeCheck["Step 3: Check Jira Status/Assignee & Propose Updates (for selected task in its context)"]
    JiraStatusAssigneeCheck --> UpdateTasksMDWithJiraStatus["Step 3.1: Update tasks.md with Jira Status/Assignee"]
    UpdateTasksMDWithJiraStatus --> GitBranch["Step 4: Propose Git Branch Creation (using Jira key)"]
    GitBranch --> Implementation["Step 5: Execute Implementation Steps"]
    Implementation --> UpdateTasksMDWithProgress["Step 5.1: Update tasks.md with Implementation Progress"]
    UpdateTasksMDWithProgress --> GitFinalize["Step 6: Propose Git Commit/Merge & DevOps Checks (using task's context)"]
    GitFinalize --> FinalTasksMDUpdate["Step 6.1: Mark Task as Implementation Complete in tasks.md"]
    FinalTasksMDUpdate --> SuggestNext["Step 7: Suggest Next Mode (QA/REFLECT)"]
    SuggestNext --> End["IMPLEMENT Mode End"]
```

## üìã REQUIRED FILE STATE VERIFICATION (Adapted)
*   **Instruction for AI**: Verification should focus on:
    1.  `activeProjectContext` is selected by the user.
    2.  `tasks.md` exists and is readable.
    3.  A task (`selectedTaskLine` from `tasks.md`) is chosen for implementation, and it belongs to the `activeProjectContext` (its `(Context: ...)` matches `activeProjectContext.context_name`).
    4.  The Jira issue ID (`selectedJiraIssueKey`) can be parsed from `selectedTaskLine`.
    5.  Relevant planning (`plan-[selectedJiraIssueKey].md`) and creative (`creative-[selectedJiraIssueKey].md`) documents exist if task complexity (derived from `tasks.md` SP or Jira) implies they were needed.
    6.  The Jira issue `selectedJiraIssueKey` is in a state ready for implementation (e.g., 'To Do', or a status from `activeProjectContext.jira_status_mapping` like `CREATIVE` or `PLAN` completion).

## üîÑ FILE SYSTEM VERIFICATION PROCESS

```mermaid
graph TD
    Start["Start File<br>Verification"] --> CheckDir["Check Directory<br>Structure"]
    CheckDir --> DirResult{"Directories<br>Exist?"}
    
    DirResult -->|"No"| ErrorDir["‚ùå ERROR:<br>Missing Directories"]
    DirResult -->|"Yes"| CheckFiles["Check Each<br>Created File"]
    
    ErrorDir --> FixDir["Fix Directory<br>Structure"]
    FixDir --> CheckDir
    
    CheckFiles --> FileResult{"All Files<br>Exist?"}
    FileResult -->|"No"| ErrorFile["‚ùå ERROR:<br>Missing/Wrong Path Files"]
    FileResult -->|"Yes"| Complete["‚úÖ Verification<br>Complete"]
    
    ErrorFile --> FixFile["Fix File Paths<br>or Recreate Files"]
    FixFile --> CheckFiles
```

## üìã DIRECTORY VERIFICATION STEPS

Before beginning any file creation:

```
‚úì DIRECTORY VERIFICATION PROCEDURE
1. Create all directories first before any files
2. Use ABSOLUTE paths: /full/path/to/directory
3. Verify each directory after creation:
   ls -la /full/path/to/directory     # Linux/Mac
   dir "C:\full\path\to\directory"    # Windows
4. Document directory structure in progress.md
5. Only proceed to file creation AFTER verifying ALL directories exist
```

## üìã FILE CREATION VERIFICATION

After creating files:

```
‚úì FILE VERIFICATION PROCEDURE
1. Use ABSOLUTE paths for all file operations: /full/path/to/file.ext
2. Verify each file creation was successful:
   ls -la /full/path/to/file.ext     # Linux/Mac
   dir "C:\full\path\to\file.ext"    # Windows 
3. If verification fails:
   a. Check for path resolution issues
   b. Verify directory exists
   c. Try creating with corrected path
   d. Recheck file exists after correction
4. Document all file paths in progress.md
```

## üîÑ COMMAND EXECUTION WORKFLOW

```mermaid
graph TD
    Start["Command<br>Execution"] --> Analyze["Analyze Command<br>Requirements"]
    Analyze --> Complexity{"Command<br>Complexity?"}
    
    Complexity -->|"Simple"| Simple["Execute<br>Single Command"]
    Complexity -->|"Moderate"| Chain["Use Efficient<br>Command Chaining"]
    Complexity -->|"Complex"| Break["Break Into<br>Logical Steps"]
    
    Simple & Chain & Break --> Verify["Verify<br>Results"]
    Verify --> Document["Document<br>Command & Result"]
    Document --> Next["Next<br>Command"]
```

## üìã LEVEL-SPECIFIC BUILD APPROACHES

```mermaid
graph TD
    subgraph "Level 1: Quick Bug Fix"
        L1A["Targeted Code<br>Examination"]
        L1B["Minimal<br>Change Scope"]
        L1C["Direct<br>Fix"]
        L1D["Verify<br>Fix"]
    end
    
    subgraph "Level 2: Enhancement"
        L2A["Sequential<br>Build"]
        L2B["Contained<br>Changes"]
        L2C["Standard<br>Testing"]
        L2D["Component<br>Documentation"]
    end
    
    subgraph "Level 3-4: Feature/System"
        L3A["Directory<br>Structure First"]
        L3B["Verify Dirs<br>Before Files"]
        L3C["Phased<br>Build"]
        L3D["Verify Files<br>After Creation"]
        L3E["Integration<br>Testing"]
        L3F["Detailed<br>Documentation"]
    end
    
    L1A --> L1B --> L1C --> L1D
    L2A --> L2B --> L2C --> L2D
    L3A --> L3B --> L3C --> L3D --> L3E --> L3F
```

## üìù BUILD DOCUMENTATION FORMAT

Document builds with:

```
## Build: [Component/Feature]

### Approach
[Brief description of build approach]

### Directory Structure
- [/absolute/path/to/dir1/]: [Purpose]
- [/absolute/path/to/dir2/]: [Purpose]

### Code Changes
- [/absolute/path/to/file1.ext]: [Description of changes]
- [/absolute/path/to/file2.ext]: [Description of changes]

### Verification Steps
- [‚úì] Directory structure created and verified
- [‚úì] All files created in correct locations
- [‚úì] File content verified

### Commands Executed
```
[Command 1]
[Result]
```

```
[Command 2]
[Result]
```

### Testing
- [Test 1]: [Result]
- [Test 2]: [Result]

### Status
- [x] Build complete
- [x] Testing performed
- [x] File verification completed
- [ ] Documentation updated
```

## üìä TASKS.MD UPDATE FORMAT

During the build process, update tasks.md with progress:

```
## Status
- [x] Initialization complete
- [x] Planning complete
[For Level 3-4:]
- [x] Creative phases complete
- [x] Directory structure created and verified
- [x] [Built component 1]
- [x] [Built component 2]
- [ ] [Remaining component]

## Build Progress
- [Component 1]: Complete
  - Files: [/absolute/path/to/files]
  - [Details about implementation]
- [Component 2]: Complete
  - Files: [/absolute/path/to/files]
  - [Details about implementation]
- [Component 3]: In Progress
  - [Current status]
```

## üìã PROGRESS.MD UPDATE FORMAT

Update progress.md with:

```
# Build Progress

## Directory Structure
- [/absolute/path/to/dir1/]: Created and verified
- [/absolute/path/to/dir2/]: Created and verified

## [Date]: [Component/Feature] Built
- **Files Created**: 
  - [/absolute/path/to/file1.ext]: Verified
  - [/absolute/path/to/file2.ext]: Verified
- **Key Changes**: 
  - [Change 1]
  - [Change 2]
- **Testing**: [Test results]
- **Next Steps**: [What comes next]
```

## üìä BUILD VERIFICATION CHECKLIST

```
‚úì BUILD VERIFICATION
- Directory structure created correctly? [YES/NO]
- All files created in correct locations? [YES/NO]
- All file paths verified with absolute paths? [YES/NO]
- All planned changes implemented? [YES/NO]
- Testing performed for all changes? [YES/NO]
- Code follows project standards? [YES/NO]
- Edge cases handled appropriately? [YES/NO]
- Build documented with absolute paths? [YES/NO]
- tasks.md updated with progress? [YES/NO]
- progress.md updated with details? [YES/NO]

‚Üí If all YES: Build complete - ready for REFLECT mode
‚Üí If any NO: Complete missing build elements
```

## üîÑ MODE TRANSITION NOTIFICATION

When the build is complete, notify user with:

```
## BUILD COMPLETE

‚úÖ Directory structure verified
‚úÖ All files created in correct locations
‚úÖ All planned changes implemented
‚úÖ Testing performed successfully
‚úÖ tasks.md updated with status
‚úÖ progress.md updated with details

‚Üí NEXT RECOMMENDED MODE: REFLECT MODE
```

## DETAILED STEPS

### Step 0.1: Read Global Configs
*   **Action**: Read `integration_config.md` for `Project Contexts`, global settings, and `tasks.md` format.

### Step 0.2: Select Active Project Context
*   **Action**: (As defined in previous updates - user selects `activeProjectContext`).
*   **Action**: Store `selectedJiraProjectKey = activeProjectContext.jira_project_key`, `selectedJiraStatusMapping = activeProjectContext.jira_status_mapping`, `selectedContextName = activeProjectContext.context_name`, etc.

### Step 1: Auto-Sync tasks.md with Jira (for all contexts)
*   **Action**: Read `tasks.md` line by line.
    *   For each line, parse `JIRA_PROJECT_KEY_FROM_TASK`, `JIRA_ISSUE_ID_FROM_TASK`, `CONTEXT_NAME_FROM_TASK`, current local status checkbox `[ ]` or `[x]`, and current local Story Points (e.g., from `SP_VALUE=[X]`).
    *   Find the corresponding `Project Context` in `integration_config.md` using `CONTEXT_NAME_FROM_TASK` or `JIRA_PROJECT_KEY_FROM_TASK`. Let this be `taskSpecificContext`.
    *   If `taskSpecificContext` found:
        *   Let `fieldsToFetch = ["status"]`.
        *   If `taskSpecificContext.jira_sp_field_id` is defined, add `taskSpecificContext.jira_sp_field_id` to `fieldsToFetch`.
        *   Call `mcp_mcp-atlassian_jira_get_issue` for `JIRA_ISSUE_ID_FROM_TASK` in its specific project, requesting `fieldsToFetch`.
        *   Let `jiraStatus = result.status.name` (or ID).
        *   Let `jiraSpValue = result.fields[taskSpecificContext.jira_sp_field_id]` if present and `jira_sp_field_id` was fetched.
        *   Let `lineToUpdate = false` and `updatedLineContent = original_line_from_tasks_md`.
        *   If Jira status indicates completion (e.g., matches a "Done" or "Closed" status in `taskSpecificContext.jira_status_mapping`) and local status is `[ ]`:
            *   Mark task for update to `[x]` in `updatedLineContent`. Set `lineToUpdate = true`.
        *   If `jiraSpValue` is available and different from local Story Points (or local SP is missing):
            *   Update `updatedLineContent` to include/replace the SP part (e.g., `SP_VALUE=[jiraSpValue]`). Ensure format matches `integration_config.md`. Set `lineToUpdate = true`.
        *   If `lineToUpdate` is true, propose `edit_file` for `tasks.md` to replace the original line with `updatedLineContent`.
*   **Report**: "`tasks.md` sync check complete. Proposed updates if any, including SP values."

### Step 2: Select Task from tasks.md for Implementation (filtered by active context)
*   **Action**: Read `tasks.md`.
*   **Action**: Filter tasks: display only those lines where `(Context: [selectedContextName])` is present AND status is not yet `[x]` (not done).
*   **Action**: Ask user: "Please select a task to implement for project context '[selectedContextName]' from the list below, or provide a Jira Issue Key (e.g., [selectedJiraProjectKey]-123):\n[Filtered list from tasks.md]"
*   **Condition**: If user selects a line from `tasks.md`:
    *   **Action**: Store the full line as `selectedTaskLine`.
    *   **Action**: Parse `selectedJiraIssueKey` (e.g., "ALPHA-123") and `taskTitle` from `selectedTaskLine`.
*   **Condition**: If user provides a Jira Issue Key:
    *   **Action**: Verify it belongs to `selectedJiraProjectKey`. Store as `selectedJiraIssueKey`.
    *   **Action**: Attempt to find a matching line in `tasks.md`. If found, store as `selectedTaskLine`. If not, `selectedTaskLine` is null (task might be new to local tracking).
    *   Fetch task title from Jira for `selectedJiraIssueKey`.
*   **Error Handling**: If no task selected/identified, stop.
*   **Report**: "Implementing: [selectedJiraIssueKey] - [taskTitle] for context '[selectedContextName]'."

### Step 3: Check Jira Status/Assignee & Propose Updates (for selected task in its context)
*   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `selectedJiraIssueKey` (fields: status, assignee, labels, description). Let `currentJiraStatus = result.status.name`, `currentJiraStatusId = result.status.id`, `currentAssignee = result.assignee`, `currentLabels = result.labels`, `currentDescription = result.description`.
*   **Action**: Let `implementTargetStatusMapping = selectedJiraStatusMapping.IMPLEMENT` (this should contain `target_status_name`, `target_status_id`, and `allowed_from_statuses_names` or `allowed_from_statuses_ids` for the `activeProjectContext`).
*   **Action**: Let `targetImplementStatusName = implementTargetStatusMapping.target_status_name`.
*   **Action**: Let `targetImplementStatusId = implementTargetStatusMapping.target_status_id`.
*   **Action**: Let `allowedFromImplement = implementTargetStatusMapping.allowed_from_statuses_names` (or `allowed_from_statuses_ids`).

*   **Condition**: If `currentJiraStatus` is `targetImplementStatusName` (or `currentJiraStatusId` is `targetImplementStatusId`) AND `currentAssignee` is NOT `currentUser()`:
    *   **Report**: "STOP: Task [selectedJiraIssueKey] is already in '[targetImplementStatusName]' but assigned to [currentAssignee]. Please reassign or pick another task."
    *   **Action**: End IMPLEMENT mode or return to task selection.

*   **Condition**: If `currentJiraStatus` is NOT `targetImplementStatusName` (or `currentJiraStatusId` is NOT `targetImplementStatusId`):
    *   **Condition**: If `currentJiraStatus` is NOT in `allowedFromImplement` (check by name or ID):
        *   **Report**: "WARNING: Current Jira status '[currentJiraStatus]' for [selectedJiraIssueKey] is not in the allowed list to transition to '[targetImplementStatusName]' ([allowedFromImplement]). Manual Jira status update might be needed first or an intermediate transition."
        *   **Action**: Ask user if they want to proceed with attempting the transition to `targetImplementStatusId` or `targetImplementStatusName` anyway, or handle it manually.
    *   **Action**: (If proceeding) Propose `mcp_mcp-atlassian_jira_transition_issue` for `selectedJiraIssueKey` to `targetImplementStatusId` (preferable) or `targetImplementStatusName`.
    *   **Action**: If transition successful, set `jiraStatusChanged = true`.

*   **Condition**: If `currentAssignee` is NOT `currentUser()`:
    *   Propose `mcp_mcp-atlassian_jira_assign_issue` for `selectedJiraIssueKey` to `currentUser()`.
    *   **Action**: If assignment successful, set `jiraStatusChanged = true` (or a more specific flag like `assigneeChanged = true`).

*   **(DEPRECATED - Handled by mcp_mcp-atlassian_jira_assign_issue and specific component update logic if needed elsewhere)**
    *   ~~Let `jiraComponent = activeProjectContext.jira_component`.~~
    *   ~~Let `shouldSetComponent = (jiraComponent != "NO_NAME")`.~~
    *   ~~**Condition**: If `shouldSetComponent`: Propose `mcp_mcp-atlassian_jira_update_issue` to assign to `currentUser()` and set component to `jiraComponent`.~~
    *   ~~**Condition**: Else: Propose `mcp_mcp-atlassian_jira_update_issue` to assign to `currentUser()`.~~

*   **Action**: Wait for approval for any proposed Jira changes. If changes made, set `jiraStatusOrAssigneeChangedThisStep = true`.

### Step 3.1: Update `tasks.md` with Jira Status/Assignee
*   **Condition**: If `jiraStatusOrAssigneeChangedThisStep` is true AND `selectedTaskLine` is not null:
    *   **Action**: Propose `edit_file` for `tasks.md` to update `selectedTaskLine`. The status checkbox `[ ]` or `[x]` should primarily reflect if the task is considered *locally* started/done. Jira status changes might not directly flip this checkbox unless it moves to a final completed state. The description part of the task line in `tasks.md` can be appended with `(Jira: [currentJiraStatus])` if desired for clarity.
    *   **Report**: "`tasks.md` checked/updated to reflect current Jira status/assignee for [selectedJiraIssueKey]."
*   **Condition**: If `selectedTaskLine` is null (Jira key entered manually, not in `tasks.md` yet):
    *   **Action**: Formulate new task line for `tasks.md` using details from Jira (Key, Title, SP from Jira description if available, current Jira status, context `selectedContextName`).
    *   **Action**: Propose `edit_file` to append this new line to `tasks.md`.
    *   **Report**: "[selectedJiraIssueKey] added to `tasks.md`."

### Step 3.2: AI Task Validation (Moved from Step 4.1)
*   **Action**: (If not already validated - check for `created-by-ai` or `edited-by-ai` labels in `currentLabels` or similar markers in `currentDescription`)
*   **Action**: Let `hasAILabels = ("created-by-ai" in currentLabels OR "edited-by-ai" in currentLabels)`.
*   **Action**: Let `hasAIText = ("—Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò" in currentDescription OR "–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò" in currentDescription)`.
*   **Condition**: If NOT `hasAILabels` AND NOT `hasAIText`:
    *   **Action**: Analyze task `selectedJiraIssueKey` based on its `currentDescription` for implementation requirements.
    *   **Action**: Present interpretation focusing on implementation aspects:
        ```
        ü§ñ –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß–ò [selectedJiraIssueKey] (IMPLEMENT MODE - Initial Validation)
        
        üìã –ú–û–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ù–ê –û–°–ù–û–í–ï –û–ü–ò–°–ê–ù–ò–Ø –ò–ó JIRA:
        –°—É—Ç—å –∑–∞–¥–∞—á–∏: [implementation-focused understanding from currentDescription]
        –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: [code, tests, documentation needs from currentDescription]
        –û–∂–∏–¥–∞–µ–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: [implementation deliverables from currentDescription]
        –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: [Level 1-4 with technical reasoning based on currentDescription]
        
        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π?
        üìù –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Jira)?
        üéØ –°–æ–≥–ª–∞—Å–Ω—ã —Å –æ—Ü–µ–Ω–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏?
        ```
    *   **Action**: Wait for user confirmation.
    *   **Condition**: If user requests changes to the understanding or specification:
        *   **Action**: Solicit refined details from the user for the Jira description.
        *   **Action**: Let `refinedDescription = user_provided_details`.
        *   **Action**: Let `aiEditedNoteForValidation = "\\n\\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–æ –ò–ò –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–µ–π."`.
        *   Let `descriptionForUpdate = (activeProjectContext.jira_description_prefix || "") + refinedDescription + (activeProjectContext.jira_description_suffix || "") + aiEditedNoteForValidation`.
        *   Let `labelsForUpdate = currentLabels`. If `"edited-by-ai"` not in `labelsForUpdate`, add it. If `activeProjectContext.jira_default_labels` AND `activeProjectContext.jira_default_labels.task` exists, ensure they are in `labelsForUpdate`.
        *   Let `customFieldsForUpdate = {}`.
        *   Ask user: "–û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey] –≤ Jira –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π?"
        *   If user agrees: Call `mcp_mcp-atlassian_jira_update_issue` for `selectedJiraIssueKey` (description `descriptionForUpdate`, labels `labelsForUpdate`). Update `currentDescription` and `currentLabels` with new values.
        *   Report success/failure of update.
    *   **Action**: (If complexity changed and SP re-estimation is needed based on `atlassian-integration.mdc` logic) Propose SP update in Jira using `mcp_mcp-atlassian_jira_update_issue` with the `activeProjectContext.jira_sp_field_id`.
*   **Report**: "AI –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey] –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–µ—Ç–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."

### Step 4: Propose Git Branch Creation (considering Epic branch, using Jira key)
*   **Action**: Fetch parent Epic key for `selectedJiraIssueKey`. Let this be `parentEpicKey` (can be null).
*   **Action**: Let `defaultGitBranch = activeProjectContext.gitlab_default_branch`.
*   **Action**: Initialize `baseBranch = defaultGitBranch`.
*   **Condition**: If `parentEpicKey` is not null:
    *   **Action**: Let `epicBranchName = "epic/[parentEpicKey]"`.
    *   **Action**: Ask user: "Task [selectedJiraIssueKey] may be part of Epic [parentEpicKey]. Does a Git branch '[epicBranchName]' exist for this Epic, and should the new task branch be based on it? If unsure, or if no epic branch exists, we will use '[defaultGitBranch]'."
    *   **Condition**: If user confirms `epicBranchName` exists and should be used:
        *   Set `baseBranch = epicBranchName`.
        *   **Action**: (Optional: Propose `git checkout [epicBranchName]` and `git pull` to ensure it's up-to-date if user isn't already on it).
*   **Action**: Let `featureBranchName = "feature/[selectedJiraIssueKey]-implementation"` (or `-bugfix/`, `-hotfix/` depending on task type if discernible).
*   **Action**: Ask user: "It's recommended to work in a dedicated Git branch. Propose creating/switching to branch '[featureBranchName]' from '[baseBranch]'?"
*   **Condition**: If user agrees:
    *   **Action**: Propose `run_terminal_cmd` with `git checkout -b [featureBranchName] [baseBranch]`.
    *   **(Error Handling Note for AI)**: If `baseBranch` (especially an epic branch) doesn't exist locally, `git checkout -b` will fail if `baseBranch` is not `defaultGitBranch`. The AI should handle this by falling back to `defaultGitBranch` and informing the user, or asking the user to create/pull the epic branch first.
    *   **Action**: Wait for approval.
*   **Report**: "Git branch '[featureBranchName]' proposed/created from '[baseBranch]'."

### Step 5: Execute Implementation Steps
*   **Instruction (Prompt for LLM)**: "You are in IMPLEMENT mode for task '[selectedJiraIssueKey] - [taskTitle]' (Project Context: '[selectedContextName]', Jira Project: '[selectedJiraProjectKey]'). The current Git branch is '[currentGitBranch]' (based from '[baseBranch]'). Review linked planning/creative documents: '[planDocPath]', '[creativeDocPath]'. Assist with code generation, debugging, and implementation based on these details. Adhere to coding standards from 'coding_standards.md' and project-specific guidelines from '[activeProjectContext.guidelines_file]'."
*   **(Iterative AI-User Interaction for Implementation)**
    *   User requests code, asks for debugging help, etc.
    *   AI provides code, suggestions, explanations.
    *   AI uses `run_terminal_cmd` for build, test, lint (after user confirmation).
    *   AI uses `edit_file` for applying code changes.
    *   Progress is made iteratively on `selectedJiraIssueKey`.

### Step 5.0.1: (Optional) Update Jira Task Description (AI Assisted)
*   **Condition**: If user requests to update the Jira task description for `selectedJiraIssueKey` (e.g., during implementation for clarity, or after a sub-task completion):
    *   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `selectedJiraIssueKey` (fields: description, labels, custom fields if SP re-evaluation is possible). Let `currentDescriptionFromJira = result.description`, `currentLabelsFromJira = result.labels`.
    *   **Action**: Ask user: "–ö–∞–∫–æ–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey]? –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n[currentDescriptionFromJira]"
    *   **Action**: Let `newDescriptionFromUser = user's input`.
    *   **Action**: Let `aiCreatedNote = "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò."`.
    *   **Action**: Let `aiEditedNote = "\\n\\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò –≤ —Ö–æ–¥–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."`.
    *   Let `finalDescriptionForUpdate = (activeProjectContext.jira_description_prefix || "") + newDescriptionFromUser + (activeProjectContext.jira_description_suffix || "")`.
    *   **Condition**: If `currentDescriptionFromJira` does NOT contain `aiCreatedNote` AND `currentDescriptionFromJira` does NOT contain `aiEditedNote` (to avoid duplicate notes if edited multiple times):
        *   `finalDescriptionForUpdate = finalDescriptionForUpdate + aiEditedNote`.
    *   Else if `currentDescriptionFromJira` contains `aiCreatedNote` and not `aiEditedNote`:
        *    `finalDescriptionForUpdate = finalDescriptionForUpdate + aiEditedNote` (replacing implies more complex logic, so append for now or just ensure one AI edit note is present)

    *   Let `labelsPayload = Array.from(new Set([...currentLabelsFromJira, "edited-by-ai", ...((activeProjectContext.jira_default_labels || {}).task || [])]))`.

    *   Let `customFieldsPayloadForUpdate = {}`.
    *   **Action**: Ask user: "–ò–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—É—Ç—å –∏–ª–∏ –æ–±—ä–µ–º –∑–∞–¥–∞—á–∏ [selectedJiraIssueKey] –Ω–∞—Å—Ç–æ–ª—å–∫–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ Story Points? (–¢–µ–∫—É—â–∏–µ SP, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã: [value from Jira if fetched])".
    *   **Condition**: If user says yes:
        *   Ask for new SP value: `newSpValue`.
        *   If `activeProjectContext.jira_sp_field_id` AND `newSpValue` is valid:
            *   `customFieldsPayloadForUpdate[activeProjectContext.jira_sp_field_id] = newSpValue`.

    *   **Action**: Ask user: "–ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è Jira –¥–ª—è [selectedJiraIssueKey] (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –¥—Ä—É–≥–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è)?"
    *   **Condition**: If user says yes:
        *   // Here, solicit specific field IDs and values from the user, or provide a list based on `activeProjectContext.jira_custom_fields.task`
        *   Example: User wants to update `activeProjectContext.jira_component` to `new_component`.
        *   `componentsForUpdate = [new_component]` (if component is handled separately, otherwise add to customFieldsPayload if it's a custom field).
        *   Example: User wants to update custom field `customfield_XXXXX` to `new_custom_value`.
        *   `customFieldsPayloadForUpdate["customfield_XXXXX"] = new_custom_value`.

    *   **Action**: Show summary of proposed changes: "–ì–æ—Ç–æ–≤—ã –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É [selectedJiraIssueKey] –≤ Jira:\n–û–ø–∏—Å–∞–Ω–∏–µ:
[finalDescriptionForUpdate]
–ú–µ—Ç–∫–∏: [labelsPayload]
Story Points: [newSpValue if changed, else '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã']
–î—Ä—É–≥–∏–µ –ø–æ–ª—è: [summary of other changes]"
    *   **Condition**: If user agrees:
        *   Call `mcp_mcp-atlassian_jira_update_issue` for `selectedJiraIssueKey` (project `selectedJiraProjectKey`, description `finalDescriptionForUpdate`, labels `labelsPayload`, components (if `componentsForUpdate` defined), custom_fields `customFieldsPayloadForUpdate`).
        *   **Report**: "–ó–∞–¥–∞—á–∞ [selectedJiraIssueKey] –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Jira."
    *   **Condition**: If user disagrees:
        *   **Report**: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Jira –¥–ª—è [selectedJiraIssueKey] –æ—Ç–º–µ–Ω–µ–Ω–æ."

### Step 5.1: Update tasks.md with Implementation Progress
*   **Action**: After significant sub-steps of implementation, AI can propose updating the description part of `selectedTaskLine` in `tasks.md` to note progress (e.g., appending "- API endpoint created"). This is optional and user-driven.

### Step 6: Propose Git Commit/Merge & DevOps Checks (using task's context)
*   **Action**: Ask user: "Implementation for [selectedJiraIssueKey] complete? Suggest Git commands?"
*   **Condition**: If user agrees:
    *   Propose `git add .`, `git commit -m "feat([selectedJiraIssueKey]): Description of changes"` (get description from user), `git push origin feature/[selectedJiraIssueKey]`.
    *   Propose `git checkout [activeProjectContext.gitlab_default_branch]`, `git pull origin [activeProjectContext.gitlab_default_branch]`, `git merge --no-ff feature/[selectedJiraIssueKey]`, `git push origin [activeProjectContext.gitlab_default_branch]`.
    *   Remind about merge conflicts, PR alternative.
*   **Action**: Wait for approval for each command.
*   **GitLab Pipeline Check**:
    *   **Action**: Propose `run_terminal_cmd` command: `python devops-tools/gitlab/gitlab_tools.py check-pipeline [activeProjectContext.gitlab_default_branch] --repo_url [activeProjectContext.gitlab_project_id]` (Assuming gitlab_project_id can be a repo URL or an ID the script handles).
    *   **Action**: Wait for approval and check output.
*   **Additional DevOps Checks (Optional)**:
    *   **Action**: Check for additional deployment configurations if defined in `activeProjectContext`.
    *   **Action**: Validate deployment readiness and configuration files.
    *   **Report**: "DevOps checks completed for context '[activeProjectContext.context_name]'."

### Step 6.1: Update `tasks.md` to Reflect Implementation Stage Completion
*   **Action**: After Git & DevOps checks are done (or skipped by user):
    *   **Action**: Propose `edit_file` for `tasks.md` to update `selectedTaskLine` by appending a note like "- Implementation phase complete, pending QA/Reflection." to its description. The checkbox `[ ]` should remain unchanged at this stage.
*   **Report**: "`tasks.md` status for [selectedJiraIssueKey] noted as 'Implementation phase complete, pending QA/Reflection'."

### Step 7: Suggest Next Mode (QA/REFLECT)
*   **Reminder**: "If implementation for [selectedJiraIssueKey] affected architecture, update `/docs/architecture.md` (for context '[activeProjectContext.context_name]')."
*   **Report**: "Implementation for [selectedJiraIssueKey] complete. Recommended next: [QA/REFLECT] Mode."

### Step 8: IMPLEMENT Mode End
*   Wait for user command. 