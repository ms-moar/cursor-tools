# VAN MODE: INITIALIZATION PROCESS MAP (Multi-Context)

üö® MANDATORY FIRST STEP: MEMORY BANK CREATION üö®
NO OPERATION CAN PROCEED WITHOUT MEMORY BANK STRUCTURE

> **TL;DR:** This visual map defines the VAN mode process for project initialization, task analysis, and technical validation. It guides users through platform detection, file verification, complexity determination, and technical validation to ensure proper setup before implementation. Now includes multi-context support and Jira integration.

## üß≠ VAN MODE PROCESS FLOW

```mermaid
graph TD
    Start["üöÄ START VAN MODE"] --> ReadGlobalConfig["Step 0.1: Read Global Configs<br>(integration_config.md)"]
    ReadGlobalConfig --> SelectActiveContext["Step 0.2: Select Active Project Context"]
    SelectActiveContext --> AutoSyncTasksMD["Step 1: Auto-Sync tasks.md with Jira<br>(all contexts)"]
    AutoSyncTasksMD --> InitialTaskID["Step 2: Initial Task Identification<br>(Jira Issue Key for active context)"]
    InitialTaskID --> ArchDocCheck["Step 3: Architecture Document Check<br>(/docs/architecture.md)"]
    ArchDocCheck --> PlatformDetect["Step 4: PLATFORM DETECTION"]
    
    PlatformDetect --> DetectOS["Detect Operating System"]
    DetectOS --> CheckPath["Check Path Separator Format"]
    CheckPath --> AdaptCmds["Adapt Commands if Needed"]
    AdaptCmds --> PlatformCP["‚õî PLATFORM CHECKPOINT"]
    
    %% Add Critical Memory Bank Checkpoint
    PlatformCP --> MemoryBankCheck{"Memory Bank<br>Exists?"}
    MemoryBankCheck -->|"No"| CreateMemoryBank["CREATE MEMORY BANK<br>[CRITICAL STEP]"]
    MemoryBankCheck -->|"Yes"| BasicFileVerify["BASIC FILE VERIFICATION"]
    CreateMemoryBank --> MemoryBankCP["‚õî MEMORY BANK VERIFICATION [REQUIRED]"]
    MemoryBankCP --> BasicFileVerify
    
    %% Basic File Verification with checkpoint
    BasicFileVerify --> BatchCheck["Batch Check Essential Components"]
    BatchCheck --> BatchCreate["Batch Create Essential Structure"]
    BatchCreate --> BasicFileCP["‚õî BASIC FILE CHECKPOINT"]
    
    %% Early Complexity Determination
    BasicFileCP --> EarlyComplexity["EARLY COMPLEXITY DETERMINATION"]
    EarlyComplexity --> AnalyzeTask["Analyze Task Requirements<br>(for selected Jira task)"]
    AnalyzeTask --> EarlyLevelCheck{"Complexity Level?"}
    
    %% Level handling paths
    EarlyLevelCheck -->|"Level 1"| ComplexityCP["‚õî COMPLEXITY CHECKPOINT"]
    EarlyLevelCheck -->|"Level 2-4"| CRITICALGATE["üö´ CRITICAL GATE: FORCE MODE SWITCH"]
    CRITICALGATE --> ForceExit["Exit to PLAN mode<br>(for selected context)"]
    
    %% Level 1 continues normally
    ComplexityCP --> InitSystem["INITIALIZE MEMORY BANK<br>(context-aware)"]
    InitSystem --> Complete1["LEVEL 1 INITIALIZATION COMPLETE<br>Ready for IMPLEMENT"]
    
    %% For Level 2+ tasks after PLAN and CREATIVE modes
    ForceExit -.-> OtherModes["PLAN ‚Üí CREATIVE modes<br>(context-specific)"]
    OtherModes -.-> VANQA["VAN QA MODE<br>(Technical Validation)"]
    VANQA --> QAProcess["Technical Validation Process<br>(DevOps Pipeline Checks)"]
    QAProcess --> QAResult{"QA<br>Passed?"}
    QAResult -->|"Yes"| ReadyImplement["Ready for IMPLEMENT<br>(context-specific)"]
    QAResult -->|"No"| BlockImplement["BLOCK IMPLEMENT<br>Fix Issues First"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style ReadGlobalConfig fill:#f6ad55,stroke:#c27022,color:white
    style SelectActiveContext fill:#f6ad55,stroke:#c27022,color:white
    style AutoSyncTasksMD fill:#10b981,stroke:#059669,color:white
    style CRITICALGATE fill:#ff5555,stroke:#dd3333,color:white
    style VANQA fill:#6f42c1,stroke:#5a32a3,color:white
    style ReadyImplement fill:#10b981,stroke:#059669,color:white
    style BlockImplement fill:#ff5555,stroke:#dd3333,color:white
```

## üåê PLATFORM DETECTION PROCESS

```mermaid
graph TD
    PD["Platform Detection"] --> CheckOS["Detect Operating System"]
    CheckOS --> Win["Windows"]
    CheckOS --> Mac["macOS"]
    CheckOS --> Lin["Linux"]
    
    Win & Mac & Lin --> Adapt["Adapt Commands<br>for Platform"]
    
    Win --> WinPath["Path: Backslash (\\)"]
    Mac --> MacPath["Path: Forward Slash (/)"]
    Lin --> LinPath["Path: Forward Slash (/)"]
    
    Win --> WinCmd["Command Adaptations:<br>dir, icacls, etc."]
    Mac --> MacCmd["Command Adaptations:<br>ls, chmod, etc."]
    Lin --> LinCmd["Command Adaptations:<br>ls, chmod, etc."]
    
    WinPath & MacPath & LinPath --> PathCP["Path Separator<br>Checkpoint"]
    WinCmd & MacCmd & LinCmd --> CmdCP["Command<br>Checkpoint"]
    
    PathCP & CmdCP --> PlatformComplete["Platform Detection<br>Complete"]
    
    style PD fill:#4da6ff,stroke:#0066cc,color:white
    style PlatformComplete fill:#10b981,stroke:#059669,color:white
```

## üìÅ FILE VERIFICATION PROCESS

```mermaid
graph TD
    Start["File Verification<br>Start"] --> CheckStructure["Check Project<br>Structure"]
    CheckStructure --> MemoryBank["Verify Memory Bank<br>Directory"]
    MemoryBank --> CoreFiles["Check Core Files<br>Existence"]
    CoreFiles --> CreateMissing["Create Missing<br>Files/Directories"]
    CreateMissing --> VerifyCreation["Verify Creation<br>Success"]
    VerifyCreation --> Complete["File Verification<br>Complete"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Complete fill:#10b981,stroke:#059669,color:white
```

## üîç COMPLEXITY DETERMINATION PROCESS

```mermaid
graph TD
    CD["Complexity<br>Determination"] --> AnalyzeReq["Analyze Task<br>Requirements"]
    AnalyzeReq --> CheckScope["Check Scope<br>and Impact"]
    CheckScope --> EstimateTime["Estimate Time<br>and Resources"]
    EstimateTime --> DetermineLevel{"Determine<br>Level"}
    
    DetermineLevel -->|"Simple Bug Fix"| Level1["Level 1<br>Quick Fix"]
    DetermineLevel -->|"Enhancement"| Level2["Level 2<br>Simple Enhancement"]
    DetermineLevel -->|"Feature"| Level3["Level 3<br>Feature Development"]
    DetermineLevel -->|"System Change"| Level4["Level 4<br>Complex System"]
    
    Level1 --> ContinueVAN["Continue in<br>VAN Mode"]
    Level2 & Level3 & Level4 --> SwitchPLAN["Switch to<br>PLAN Mode"]
    
    style CD fill:#4da6ff,stroke:#0066cc,color:white
    style ContinueVAN fill:#10b981,stroke:#059669,color:white
    style SwitchPLAN fill:#f6ad55,stroke:#c27022,color:white
```

## üìã DETAILED STEPS

### Step 0.1: Read Global Configs
*   **Action**: Read `integration_config.md` for `Project Contexts`, global settings, and `tasks.md` format.
*   **Data**: Extract available project contexts and their configurations.

### Step 0.2: Select Active Project Context
*   **Action**: If multiple project contexts exist, ask user to select one.
*   **Action**: Store `activeProjectContext` with Jira project key, status mappings, GitLab settings.
*   **Report**: "Using project context: '[activeProjectContext.context_name]' for initialization."

### Step 1: Auto-Sync tasks.md with Jira (all contexts)
*   **Action**: Read `tasks.md` line by line.
*   **Action**: For each task, parse Jira project key, issue ID, and context.
*   **Action**: Check Jira status for each task and propose updates to `tasks.md` if needed.
*   **Report**: "`tasks.md` sync check complete."

### Step 2: Initial Task Identification (Jira Issue Key for active context)
*   **Action**: Ask user for specific Jira Issue Key from active context or select from `tasks.md`.
*   **Action**: If provided, validate it belongs to `activeProjectContext.jira_project_key`.
*   **Action**: Fetch task details from Jira for context.
*   **Report**: "Working with task: [selectedJiraIssueKey] in context '[activeProjectContext.context_name]'."

### Step 3: Architecture Document Check
*   **Action**: Check if `/docs/architecture.md` exists for the project.
*   **Action**: If missing, note for creation during CREATIVE phase.
*   **Report**: "Architecture document status checked."

### Step 4-6: Platform Detection, Memory Bank, File Verification
*   **Action**: (As previously defined - detect OS, create/verify Memory Bank structure)
*   **Enhancement**: All file operations now consider `activeProjectContext.context_name` for organization.

### Step 7: Complexity Determination (for selected Jira task)
*   **Action**: Analyze the selected Jira task requirements and Story Points.
*   **Action**: Determine complexity level (1-4) based on scope and impact.
*   **Decision**: 
    *   Level 1: Continue in VAN mode ‚Üí IMPLEMENT
    *   Level 2-4: Force switch to PLAN mode for proper planning

### VAN QA MODE (Technical Validation - Post-CREATIVE, Pre-BUILD)
*   **Purpose**: Technical validation for Level 2-4 tasks after CREATIVE phase.
*   **Checks**: 
    *   Dependency verification
    *   Configuration validation  
    *   Environment validation
    *   DevOps Pipeline status checks for GitLab
*   **Result**: Success allows BUILD mode, failure blocks it.

## üîÑ AUTOMATIC JIRA TASK SYNCHRONIZATION

```mermaid
graph TD
    Sync["Auto-Sync Start"] --> ReadTasks["Read tasks.md"]
    ReadTasks --> ParseTasks["Parse Each Task Line"]
    ParseTasks --> CheckJira["Check Jira Status<br>for Each Task"]
    CheckJira --> CompareStatus["Compare Local vs<br>Jira Status"]
    CompareStatus --> ProposeUpdates["Propose tasks.md<br>Updates"]
    ProposeUpdates --> UserApproval["Wait for User<br>Approval"]
    UserApproval --> UpdateFiles["Update tasks.md<br>if Approved"]
    UpdateFiles --> SyncComplete["Sync Complete"]
    
    style Sync fill:#4da6ff,stroke:#0066cc,color:white
    style SyncComplete fill:#10b981,stroke:#059669,color:white
```

## üìä VAN MODE VERIFICATION CHECKLIST (Enhanced)

```
‚úì VAN MODE VERIFICATION
- Global configs read from integration_config.md? [YES/NO]
- Active project context selected? [YES/NO]
- tasks.md synced with Jira (all contexts)? [YES/NO]
- Initial task identified for active context? [YES/NO]
- Architecture document status checked? [YES/NO]
- Platform detection completed? [YES/NO]
- Memory Bank structure verified? [YES/NO]
- File verification completed? [YES/NO]
- Complexity level determined? [YES/NO]
- Appropriate mode transition suggested? [YES/NO]

‚Üí If all YES: VAN mode complete - proceed to suggested mode
‚Üí If any NO: Complete missing initialization elements
```

## üîÑ MODE TRANSITION NOTIFICATION (Enhanced)

When VAN mode is complete, notify user with context-aware information:

```
## VAN MODE COMPLETE

‚úÖ Project context '[activeProjectContext.context_name]' initialized
‚úÖ tasks.md synchronized with Jira project '[activeProjectContext.jira_project_key]'
‚úÖ Task [selectedJiraIssueKey] identified and validated
‚úÖ Memory Bank structure verified
‚úÖ Platform detection completed

‚Üí COMPLEXITY LEVEL: [Level X]
‚Üí NEXT RECOMMENDED MODE: [PLAN/IMPLEMENT] MODE
‚Üí CONTEXT: [activeProjectContext.context_name]
```

## üö´ CRITICAL GATE: FORCE MODE SWITCH

For Level 2-4 tasks, VAN mode enforces proper workflow:

```
üö´ CRITICAL GATE ACTIVATED

Task complexity: Level [2/3/4]
This task requires proper planning and design phases.

‚úÖ VAN initialization complete for context '[activeProjectContext.context_name]'
üö´ IMPLEMENT mode BLOCKED until PLAN and CREATIVE phases complete

‚Üí MANDATORY NEXT STEP: PLAN MODE
‚Üí After PLAN: CREATIVE MODE required
‚Üí After CREATIVE: VAN QA MODE for technical validation
‚Üí Only then: IMPLEMENT MODE allowed
```
Response: OK VAN QA - Beginning Technical Validation
#### Minimal Build Test Implementation:
```powershell
# Example: Perform minimal build test for a React project
function Perform-MinimalBuildTest {
    $buildSuccess = $false
    $testSuccess = $false
    
    # Create minimal test project
    $testDir = ".__build_test"
    if (Test-Path $testDir) {
        Remove-Item -Path $testDir -Recurse -Force
    }
    
    try {
        # Create minimal test directory
        New-Item -Path $testDir -ItemType Directory | Out-Null
        Push-Location $testDir
        
        # Initialize minimal package.json
        @"
{
  "name": "build-test",
  "version": "1.0.0",
  "description": "Minimal build test",
  "main": "index.js",
  "scripts": {
    "build": "echo Build test successful"
  }
}
"@ | Set-Content -Path "package.json"
        
        # Attempt build
        npm run build | Out-Null
        $buildSuccess = $true
        
        # Create minimal test file
        @"
console.log('Test successful');
"@ | Set-Content -Path "index.js"
        
        # Run basic test
        node index.js | Out-Null
        $testSuccess = $true
        
    } catch {
        Write-Output "‚ùå Build test failed: $($_.Exception.Message)"
    } finally {
        Pop-Location
        if (Test-Path $testDir) {
            Remove-Item -Path $testDir -Recurse -Force
        }
    }
    
    # Display results
    if ($buildSuccess -and $testSuccess) {
        Write-Output "‚úÖ Minimal build test passed successfully"
        return $true
    } else {
        if (-not $buildSuccess) {
            Write-Output "‚ùå Build process failed"
        }
        if (-not $testSuccess) {
            Write-Output "‚ùå Basic functionality test failed"
        }
        return $false
    }
}