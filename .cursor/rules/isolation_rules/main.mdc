---
description: main rule
globs: main.mdc
alwaysApply: false
---
# üîç ISOLATION-FOCUSED MEMORY BANK SYSTEM

üö® CRITICAL RULE: MEMORY BANK CREATION IS MANDATORY üö®
Memory Bank MUST be created BEFORE any other operation in ANY mode
NO process can continue without verifying Memory Bank existence

> **TL;DR:** This system is designed to work with Cursor custom modes, where each mode loads only the rules it needs. The system uses visual Mermaid diagrams and selective document loading to optimize context usage.

## üß≠ MODE-SPECIFIC VISUAL MAPS

```mermaid
graph TD
    subgraph Modes["Cursor Custom Modes"]
        VAN["VAN MODE<br>Initialization"] --> PLAN["PLAN MODE<br>Task Planning"]
        PLAN --> Creative["CREATIVE MODE<br>Design Decisions"]
        Creative --> Implement["IMPLEMENT MODE<br>Code Implementation"]
        Implement --> Reflect["REFLECT MODE<br>Task Review"]
        Reflect --> Archive["ARCHIVE MODE<br>Documentation"]
    end
    
    VAN -.->|"Loads"| VANRules["‚Ä¢ main.md<br>‚Ä¢ platform-awareness.md<br>‚Ä¢ file-verification.md<br>‚Ä¢ workflow-init.md"]
    PLAN -.->|"Loads"| PLANRules["‚Ä¢ main.md<br>‚Ä¢ task-tracking.md<br>‚Ä¢ planning-process.md"]
    Creative -.->|"Loads"| CreativeRules["‚Ä¢ main.md<br>‚Ä¢ creative-phase.md<br>‚Ä¢ design-patterns.md"]
    Implement -.->|"Loads"| ImplementRules["‚Ä¢ main.md<br>‚Ä¢ command-execution.md<br>‚Ä¢ implementation-guide.md"]
    Reflect -.->|"Loads"| ReflectRules["‚Ä¢ main.md<br>‚Ä¢ reflection-format.md"]
    Archive -.->|"Loads"| ArchiveRules["‚Ä¢ main.md<br>‚Ä¢ archiving-guide.md"]
```

## üìã MEMORY BANK VERIFICATION - MANDATORY IN ALL MODES

```mermaid
graph TD
    Start["Mode Activation"] --> CheckMemBank{"Memory Bank<br>Exists?"}
    
    CheckMemBank -->|"No"| CreateMemBank["CREATE MEMORY BANK<br>[CRITICAL STEP]"]
    CheckMemBank -->|"Yes"| VerifyMemBank["Verify Memory Bank<br>Structure"]
    
    CreateMemBank --> VerifyCreation{"Creation<br>Successful?"}
    VerifyCreation -->|"No"| AbortAll["‚õî ABORT ALL OPERATIONS<br>Fix Memory Bank First"]
    VerifyCreation -->|"Yes"| VerifyMemBank
    
    VerifyMemBank --> StructureCheck{"Structure<br>Valid?"}
    StructureCheck -->|"No"| FixStructure["Fix Memory Bank<br>Structure"]
    StructureCheck -->|"Yes"| ContinueMode["Continue with<br>Mode Operations"]
    
    FixStructure --> VerifyFix{"Fix<br>Successful?"}
    VerifyFix -->|"No"| AbortAll
    VerifyFix -->|"Yes"| ContinueMode
    
    style CheckMemBank fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style CreateMemBank fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style VerifyCreation fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style AbortAll fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style StructureCheck fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style FixStructure fill:#ff5555,stroke:#dd3333,color:white
    style VerifyFix fill:#ff5555,stroke:#dd3333,color:white
```

## üìö VISUAL PROCESS MAPS

Each mode has its own visual process map:

- @VAN Mode Map
- @PLAN Mode Map
- @CREATIVE Mode Map
- @IMPLEMENT Mode Map
- @REFLECT Mode Map
- @ARCHIVE Mode Map

## üîÑ FILE STATE VERIFICATION

In this isolation-focused approach, Memory Bank files maintain continuity between modes:

```mermaid
graph TD
    subgraph "Memory Bank Files"
        tasks["tasks.md<br>Source of Truth"]
        active["activeContext.md<br>Current Focus"]
        creative["creative-*.md<br>Design Decisions"]
        progress["progress.md<br>Implementation Status"]
    end
    
    VAN["VAN MODE"] -->|"Creates/Updates"| tasks
    VAN -->|"Creates/Updates"| active
    
    PLAN["PLAN MODE"] -->|"Reads"| tasks
    PLAN -->|"Reads"| active
    PLAN -->|"Updates"| tasks
    
    Creative["CREATIVE MODE"] -->|"Reads"| tasks
    Creative -->|"Creates"| creative
    Creative -->|"Updates"| tasks
    
    Implement["IMPLEMENT MODE"] -->|"Reads"| tasks
    Implement -->|"Reads"| creative
    Implement -->|"Updates"| tasks
    Implement -->|"Updates"| progress
    
    Reflect["REFLECT MODE"] -->|"Reads"| tasks
    Reflect -->|"Reads"| progress
    Reflect -->|"Updates"| tasks
    
    Archive["ARCHIVE MODE"] -->|"Reads"| tasks
    Archive -->|"Reads"| progress
    Archive -->|"Archives"| creative
```

## üìã MODE TRANSITION PROTOCOL

```mermaid
sequenceDiagram
    participant User
    participant CurrentMode
    participant NextMode
    
    CurrentMode->>CurrentMode: Complete Phase Requirements
    CurrentMode->>User: "Phase complete. NEXT MODE: [mode name]"
    User->>CurrentMode: End Current Mode
    User->>NextMode: Start Next Mode
    NextMode->>NextMode: Verify Required File State
    
    alt File State Valid
        NextMode->>User: "Continuing from previous mode..."
    else File State Invalid
        NextMode->>User: "Required files not in expected state"
        NextMode->>User: "Return to [previous mode] to complete requirements"
    end
```

## üíª PLATFORM-SPECIFIC COMMANDS

| Action | Windows | Mac/Linux |
|--------|---------|-----------|
| Create file | `echo. > file.ext` | `touch file.ext` |
| Create directory | `mkdir directory` | `mkdir -p directory` |
| Change directory | `cd directory` | `cd directory` |
| List files | `dir` | `ls` |
| Show file content | `type file.ext` | `cat file.ext` |

## ‚ö†Ô∏è COMMAND EFFICIENCY GUIDANCE

For optimal performance, use efficient command chaining when appropriate:

```
# Efficient command chaining examples:
mkdir -p project/{src,tests,docs} && cd project
grep "TODO" $(find . -name "*.js")
npm install && npm start
```

Refer to [command-execution.mdc](mdc:.cursor/rules/isolation_rules/Core/command-execution.mdc) for detailed guidance. 

## üó£Ô∏è AI COMMUNICATION PROTOCOL

**Instruction for AI:** You **MUST** start every message to the user with the following line, replacing `[Current Working Directory]` with the actual current working directory relative to the project root, or the absolute path if outside the project root:

`**üìÇ –ü—Ä–æ–µ–∫—Ç: cursor-memory-bank | –ü–∞–ø–∫–∞: [Current Working Directory]**`

This ensures clarity about the context of your operations at all times.

## üîí MANDATORY SECURITY RULES

When working with files in the project, the following rules **MUST** be observed by the AI:

1.  **Backup Before Deletion or Modification**: Before deleting **OR MODIFYING** any file for any reason, its backup copy **MUST** be created in the `backup-files/` folder.
2.  **Create Backup Directory**: If the `backup-files/` directory is missing, it **MUST** be created automatically by the AI before attempting to save a backup.
3.  **Backup File Naming**: The backup file name format **MUST** be: `{original_filename}_{timestamp}.bak`. The timestamp should be in `YYYYMMDDHHMMSS` format (e.g., `myfile.txt_20240515103000.bak`).

### 1. Automatic Backup Creation Procedure

The AI **MUST** follow this procedure for backups:

```mermaid
graph TD
    StartBackup["File Operation Requested<br>(Delete/Modify)"] -->
    CheckBackupDir{"`backup-files/`<br>Exists?"}
    CheckBackupDir -- No --> CreateBackupDir["Create `backup-files/`"]
    CreateBackupDir --> GenerateName["Generate Backup Name:<br>`{original_filename}_{YYYYMMDDHHMMSS}.bak`"]
    CheckBackupDir -- Yes --> GenerateName
    GenerateName --> CopyFile["Copy Original File to<br>`backup-files/{backup_name}`"]
    CopyFile --> VerifyCopy{"Backup<br>Successful?"}
    VerifyCopy -- Yes --> ProceedOp["Proceed with Original<br>Delete/Modify Operation"]
    VerifyCopy -- No --> ErrorBackup["Log Error: Backup Failed<br>DO NOT Proceed with Operation"]
    ErrorBackup --> NotifyUser["Notify User of Backup Failure"]

    style StartBackup fill:#f9f,stroke:#333,stroke-width:2px
    style CreateBackupDir fill:#ffcc00,stroke:#333,stroke-width:2px
    style ErrorBackup fill:#ff0000,stroke:#333,stroke-width:2px,color:white
    style ProceedOp fill:#ccffcc,stroke:#333,stroke-width:2px
```
*   **Verification**: After copying, the AI should, if possible, verify the backup's existence and integrity (e.g., file size if easily obtainable).
*   **Failure Handling**: If backup creation fails, the original operation (delete/modify) **MUST NOT** proceed, and the user should be informed.

### 2. File Access Control Rules

The AI **MUST** adhere to these access control rules based on file types and locations:

*   **System Configuration Files (`.cursor/*`, `*.json`, `*.yaml`, `*.toml`, `.git*` outside `devops-tools/.git_disabled`):**
    *   **Allowed**: `read_file`, `list_dir`.
    *   **Restricted (Requires Explicit User Confirmation for EACH operation)**: `edit_file`, `delete_file`.
    *   **AI Action**: Before proposing `edit_file` or `delete_file` for these, explicitly state the file and the intended change, then ask "ARE YOU SURE YOU WANT TO [MODIFY/DELETE] THIS SYSTEM CONFIGURATION FILE? (YES/NO)".

*   **Memory Bank Core Files (`memory-bank/*.md`, `memory-bank/creative/*.md`, `memory-bank/reflection/*.md`, `memory-bank/archive/*.md`):**
    *   **Allowed**: `read_file`, `edit_file`, `create_file` (within defined structure), `delete_file` (e.g. clearing `tasks.md` as per workflow).
    *   **AI Action**: Operations should align with documented Memory Bank workflows. Significant deviations require user notification.

*   **User-Generated Project Files (e.g., source code, `.md` outside Memory Bank core, `devops-tools/*`):**
    *   **Allowed**: `read_file`, `edit_file`, `create_file`, `delete_file`.
    *   **AI Action**: Standard backup procedures apply. For deletions, consider a soft confirmation like "This will delete [filename]. Proceed?".

*   **Backup Files (`backup-files/*`):**
    *   **Allowed**: `read_file`, `list_dir`.
    *   **Restricted**: `edit_file`, `delete_file` (should generally be avoided, manual operation by user preferred).
    *   **AI Action**: AI should not routinely modify or delete backup files.

### 3. Security Validation for Operations

Before executing commands or file operations, the AI **MUST** perform these validations:

*   **`backup_created_check`**: For any `edit_file` or `delete_file` operation on non-temporary files, confirm a backup was made according to the procedure above.
*   **`user_confirmation_check`**: For `delete_file` on critical files or system configuration files, ensure explicit user "YES" has been received.
*   **`path_validation_check`**: For `edit_file`, `create_file`, `delete_file`, ensure paths are within the project workspace and do not use `..` to escape the workspace. Relative paths are preferred.
*   **`destructive_command_check`**: For `run_terminal_cmd` involving potentially destructive commands (e.g., `rm -rf`, `git reset --hard`), simulate the outcome if possible or request explicit user confirmation with a clear warning.

These rules are critical for data safety, project integrity, and operational security. 