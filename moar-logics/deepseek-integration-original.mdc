---
description:
globs:
alwaysApply: false
---
# Интеграция с DeepSeek для Memory Bank

## Основные принципы интеграции

### Автоматический выбор модели DeepSeek

**Матрица выбора модели по сложности задачи:**

| Тип задачи | Сложность | Рекомендуемая модель | Причина выбора |
|------------|-----------|---------------------|----------------|
| Простые вопросы | Низкая | DeepSeek-Chat | Быстрые ответы, экономия токенов |
| Анализ кода | Средняя | DeepSeek-Coder | Специализация на программировании |
| Рефакторинг | Средняя-Высокая | DeepSeek-Coder-V2 | Улучшенное понимание архитектуры |
| Архитектурные решения | Высокая | DeepSeek-V3 | Максимальные возможности рассуждений |
| Математические задачи | Высокая | DeepSeek-Math | Специализация на математике |

**Алгоритм автоматического выбора модели:**
1. Анализ ключевых слов в запросе пользователя
2. Определение типа задачи (код, математика, общие вопросы)
3. Оценка сложности на основе длины запроса и контекста
4. Проверка доступности предпочтительной модели
5. Выбор оптимальной модели с учетом ограничений

**Ключевые слова для определения типа задачи:**
- **Код**: "функция", "класс", "алгоритм", "рефакторинг", "отладка", "код"
- **Математика**: "формула", "уравнение", "вычисление", "статистика", "алгебра"
- **Архитектура**: "дизайн", "паттерн", "архитектура", "структура", "система"
- **Анализ**: "анализ", "исследование", "сравнение", "оценка", "обзор"

### Обработка специальных триггеров

**Триггер "дипсик" и его вариации:**
- "дипсик", "deepseek", "дип сик", "дипсік" (украинский)
- Автоматическое переключение на DeepSeek при обнаружении триггера
- Принудительное использование самой мощной доступной модели
- Добавление специального контекста для улучшения ответов

**Алгоритм обработки триггеров:**
1. Сканирование входящего сообщения на наличие триггерных слов
2. Нормализация и приведение к стандартному виду
3. Определение уровня приоритета триггера
4. Переопределение выбора модели в соответствии с триггером
5. Логирование использования триггера для аналитики

**Дополнительные триггеры:**
- "максимум" → Использование самой мощной модели
- "быстро" → Использование самой быстрой модели
- "экономно" → Использование модели с минимальным потреблением токенов
- "код" → Принудительное использование DeepSeek-Coder

### Оптимизация запросов для экономии токенов

**Стратегии сжатия контекста:**
1. **Удаление избыточной информации**: Убираем повторяющиеся данные и неактуальный контекст
2. **Сокращение примеров**: Оставляем только самые релевантные примеры кода
3. **Компрессия истории**: Сжимаем предыдущие сообщения до ключевых моментов
4. **Умное усечение**: Сохраняем начало и конец важных блоков кода

**Алгоритм оптимизации токенов:**
```
Исходный запрос → Анализ важности → Сжатие → Проверка лимитов → Отправка
```

**Правила приоритизации контента:**
- Высокий приоритет: Текущая задача, ошибки, требования
- Средний приоритет: Примеры кода, документация
- Низкий приоритет: История чата, общий контекст

**Техники сжатия:**
- Замена длинных имен переменных на короткие аналоги
- Удаление комментариев из примеров кода (кроме критически важных)
- Сокращение повторяющихся структур данных
- Использование ссылок вместо полного дублирования

### Кэширование результатов

**Стратегия кэширования:**
- **Время жизни кэша**: 24 часа для общих вопросов, 1 час для кода
- **Ключи кэширования**: Хэш от нормализованного запроса + модель
- **Размер кэша**: Максимум 1000 записей с LRU вытеснением
- **Инвалидация**: При изменении файлов проекта или обновлении модели

**Алгоритм кэширования:**
1. Нормализация запроса (удаление лишних пробелов, приведение к нижнему регистру)
2. Генерация ключа кэша на основе запроса и контекста
3. Проверка наличия актуальной записи в кэше
4. При попадании - возврат кэшированного результата
5. При промахе - выполнение запроса и сохранение результата

**Исключения из кэширования:**
- Запросы с временными метками
- Персонализированные ответы
- Запросы с случайными элементами
- Критически важные операции безопасности

### Мониторинг использования API

**Отслеживаемые метрики:**
- Количество запросов в час/день/месяц
- Потребление токенов по моделям
- Время отклика для каждой модели
- Частота ошибок и их типы
- Эффективность кэширования

**Структура лога использования:**
```json
{
  "timestamp": "2024-01-15T10:30:00Z",
  "model": "deepseek-coder-v2",
  "tokens_input": 1500,
  "tokens_output": 800,
  "response_time_ms": 2300,
  "cache_hit": false,
  "trigger_used": "дипсик",
  "task_type": "code_analysis",
  "success": true
}
```

**Автоматические уведомления:**
- Превышение лимита токенов (80% от месячного лимита)
- Высокая частота ошибок (>5% за час)
- Необычно долгое время отклика (>10 секунд)
- Низкая эффективность кэша (<30% попаданий)

### Обработка ошибок и резервные стратегии

**Типы ошибок и реакция:**
1. **Превышение лимита токенов**: Автоматическое сжатие запроса и повтор
2. **Недоступность модели**: Переключение на резервную модель
3. **Таймаут запроса**: Повтор с увеличенным таймаутом
4. **Ошибка аутентификации**: Обновление токена доступа

**Резервная цепочка моделей:**
```
DeepSeek-V3 → DeepSeek-Coder-V2 → DeepSeek-Chat → Локальная модель
```

**Алгоритм обработки ошибок:**
1. Определение типа ошибки
2. Применение соответствующей стратегии восстановления
3. Логирование ошибки для анализа
4. Уведомление пользователя при критических ошибках
5. Автоматический переход на резервную модель

### Настройки производительности

**Параметры оптимизации:**
- **Температура**: 0.1 для кода, 0.7 для творческих задач
- **Max tokens**: Динамическое ограничение на основе типа задачи
- **Top-p**: 0.9 для баланса качества и разнообразия
- **Frequency penalty**: 0.1 для избежания повторений

**Адаптивные настройки:**
- Автоматическое снижение температуры для технических задач
- Увеличение max_tokens для сложных архитектурных вопросов
- Динамическая настройка penalty на основе контекста

**Профили производительности:**
1. **Быстрый**: Минимальные токены, высокая температура
2. **Сбалансированный**: Оптимальное соотношение качества и скорости
3. **Качественный**: Максимальные токены, низкая температура
4. **Экономный**: Минимальное потребление токенов

### Интеграция с Memory Bank

**Синхронизация контекста:**
- Автоматическая передача релевантного контекста проекта
- Учет текущего режима работы Memory Bank
- Адаптация ответов под стиль проекта

**Правила изоляции:**
- Соблюдение принципов изоляции Memory Bank
- Раздельная обработка контекстов разных проектов
- Защита конфиденциальной информации

**Интеграция с workflow:**
- Автоматическое создание задач на основе рекомендаций DeepSeek
- Обновление документации при получении новых решений
- Синхронизация с системой управления задачами

Данная система обеспечивает эффективную интеграцию с моделями DeepSeek с автоматической оптимизацией производительности и экономией ресурсов.
