---
description:
globs:
alwaysApply: false
---
# Интеграция с Atlassian для Memory Bank

## Основные принципы интеграции

### Интеграция с Jira

**Автоматическое создание задач с ИИ-валидацией:**

**Процедура создания задачи:**
1. Извлечение настроек из активного контекста проекта
2. Анализ требований и автоматическое определение типа задачи
3. Генерация описания задачи с использованием ИИ
4. Валидация данных задачи перед отправкой в Jira
5. Создание задачи через Jira API с автоматическим назначением меток
6. Логирование результата операции

**Метки ИИ-валидации:**
- **AI_VALIDATED**: Задача проверена и одобрена ИИ
- **AI_GENERATED**: Задача полностью сгенерирована ИИ
- **AI_ESTIMATED**: Story Points рассчитаны автоматически
- **AI_CATEGORIZED**: Тип задачи определен автоматически
- **AI_PRIORITIZED**: Приоритет установлен на основе анализа

**Алгоритм подготовки данных задачи:**
1. Валидация обязательных полей (название, описание, ключ проекта)
2. Автоматическое добавление меток на основе метода создания
3. Расчет и установка Story Points при наличии данных
4. Назначение компонента согласно настройкам контекста
5. Определение приоритета на основе уровня сложности
6. Добавление связей с родительскими Epic (при необходимости)

**Обработка ошибок:**
- При сбое MCP соединения: логирование с временной меткой, возврат ошибки
- При ошибке Jira API: детальное логирование ответа API, анализ причины
- При валидационных ошибках: предложение исправлений
- При превышении лимитов: автоматическая постановка в очередь

### Автоматическое назначение компонентов

**Логика назначения компонентов:**
1. Получение настройки jira_component из активного контекста проекта
2. Если jira_component == "NO_NAME": пропуск назначения компонента
3. Иначе: добавление компонента к задаче с валидацией существования
4. Логирование действий для аудита

**Валидация компонентов:**
- Проверка существования компонента в проекте Jira
- При отсутствии компонента: предупреждение и создание задачи без компонента
- При наличии: автоматическое назначение с подтверждением
- Кэширование списка доступных компонентов для оптимизации

**Автоматическое создание компонентов:**
- Анализ структуры проекта для предложения новых компонентов
- Создание компонентов на основе архитектуры приложения
- Автоматическое назначение ответственных за компоненты
- Синхронизация с Git структурой проекта

### Синхронизация статусов задач

**Маппинг статусов (tasks.md → Jira):**
- "TODO" → "К выполнению"
- "IN_PROGRESS" → "В работе"
- "VAN" → "Анализ и валидация"
- "PLAN" → "Планирование"
- "CREATIVE" → "Творческая фаза"
- "IMPLEMENT" → "Реализация"
- "REFLECT" → "Рефлексия"
- "ARCHIVE" → "Архивирование"
- "DONE" → "Выполнено"

**Процедура синхронизации:**
1. Чтение файла tasks.md и парсинг записей задач
2. Для каждой задачи с ключом Jira: получение текущего статуса
3. Сравнение статусов и выявление расхождений
4. При различиях: обновление статуса в Jira с логированием
5. Обработка конфликтов и ошибок синхронизации

**Двунаправленная синхронизация:**
1. Получение задач из проекта Jira
2. Сравнение с записями в tasks.md
3. Обнаружение конфликтов (различные статусы)
4. Применение стратегии разрешения конфликтов:
   - Jira имеет приоритет для изменений статуса
   - tasks.md имеет приоритет для изменений описания
   - Слияние данных для новых задач

### Интеграция с Confluence

**Автоматическое создание документации:**

**Процедура создания страницы:**
1. Получение настройки confluence_space из контекста проекта
2. Формирование заголовка страницы: "{ключ_задачи} - {название_задачи}"
3. Создание содержимого страницы на основе деталей задачи
4. Выполнение создания страницы через Confluence API
5. Установка соответствующих разрешений и меток

**Шаблон содержимого страницы:**
```markdown
# {название_задачи}

## Обзор
**Ключ Jira:** {ключ_задачи}
**Story Points:** {story_points}
**Статус:** {статус}
**Исполнитель:** {исполнитель}

## Описание
{описание_задачи}

## Техническая реализация
{детали_реализации}

## Заметки по реализации
{заметки_разработчика}

## Связанные ссылки
- [Задача в Jira]({jira_url})
- [Git ветка]({git_branch_url})
- [Pull Request]({pr_url})

## История изменений
{история_изменений}
```

**Процедура обновления страницы:**
1. Проверка существования страницы для задачи
2. При существовании: обновление содержимого с сохранением ручных дополнений
3. При отсутствии: создание новой страницы с базовым шаблоном
4. Автоматическое версионирование изменений

### Управление базой знаний

**Категории документации:**
- **Архитектура**: Проектные решения и архитектура системы
- **Реализация**: Детали реализации кода и алгоритмов
- **Извлеченные уроки**: Инсайты и выводы после завершения задач
- **Устранение неполадок**: Частые проблемы и их решения
- **Лучшие практики**: Рекомендации и стандарты разработки

**Автоматическая категоризация:**
1. Анализ типа задачи и уровня сложности
2. Определение подходящей категории на основе содержимого
3. Добавление метки категории к странице Confluence
4. Создание ссылок на родительские страницы категорий
5. Автоматическое обновление индексных страниц

**Система тегов и поиска:**
- Автоматическое добавление тегов на основе технологий проекта
- Индексирование содержимого для быстрого поиска
- Создание связей между связанными документами
- Автоматические предложения похожих материалов

### Обнаружение завершения задач

**Критерии завершения по режимам:**

**VAN (Валидация и анализ):**
- Платформа обнаружена и задокументирована
- Структура файлов проанализирована
- Уровень сложности определен
- Технические риски выявлены

**PLAN (Планирование):**
- Декомпозиция задачи создана
- Story Points рассчитаны
- Зависимости идентифицированы
- План реализации утвержден

**CREATIVE (Творческая фаза):**
- Проектные решения задокументированы
- Архитектурные диаграммы созданы
- UI макеты завершены (при необходимости)
- Техническое решение одобрено

**IMPLEMENT (Реализация):**
- Изменения кода зафиксированы в Git
- Тесты написаны и проходят успешно
- Документация обновлена
- Code review завершен

**REFLECT (Рефлексия):**
- Извлеченные уроки задокументированы
- Метрики производительности собраны
- Предложения по улучшению записаны
- Ретроспектива проведена

**ARCHIVE (Архивирование):**
- Финальная документация создана
- Страница Confluence обновлена
- Задача отмечена как завершенная
- Артефакты архивированы

### Алгоритм автоматического обнаружения завершения

**Алгоритм обнаружения:**
1. Проверка критериев завершения для конкретного режима
2. Валидация существования требуемых артефактов
3. При выполнении всех критериев:
   - Отметка режима как завершенного
   - Запуск следующего режима (при необходимости)
   - Обновление статуса в Jira
4. При невыполнении: возврат списка недостающих требований

**Триггеры завершения:**
- Изменения файлов в определенных директориях
- Git коммиты с определенными паттернами
- Ручные маркеры завершения в коде или документации
- Временное завершение (для исследовательских задач)
- Автоматические проверки качества кода

### Алгоритмы синхронизации

**Синхронизация tasks.md ↔ Jira:**

**Определение направления синхронизации:**
1. Сравнение временных меток последнего изменения
2. При более новом tasks.md: синхронизация tasks.md → Jira
3. При более новом Jira: синхронизация Jira → tasks.md
4. При конфликте: интерактивное разрешение или применение правил приоритета

**Алгоритм разрешения конфликтов:**
- Приоритет Jira для изменений статуса и назначений
- Приоритет tasks.md для описаний и технических деталей
- Слияние комментариев и заметок из обеих систем
- Сохранение истории изменений для возможности отката

**Пакетная синхронизация:**
- Группировка изменений для эффективной обработки
- Валидация данных перед массовым обновлением
- Откат изменений при критических ошибках
- Отчеты о результатах синхронизации

### Мониторинг и отчетность

**Метрики интеграции:**
- Количество успешных/неудачных синхронизаций
- Время отклика Jira и Confluence API
- Частота конфликтов при синхронизации
- Использование автоматических функций

**Автоматические отчеты:**
- Ежедневные сводки активности в Jira
- Еженедельные отчеты по завершенным задачам
- Ежемесячная аналитика производительности команды
- Квартальные обзоры качества документации

**Система уведомлений:**
- Критические ошибки интеграции
- Превышение лимитов API
- Конфликты синхронизации, требующие вмешательства
- Успешное завершение важных операций

Данная система обеспечивает полную интеграцию с экосистемой Atlassian с автоматизацией рутинных процессов и поддержанием синхронизации данных между различными инструментами разработки.
